{
	"ReactJS : TSX : Component : Container": {
		"prefix": "ccReactJS_TSX_Component_Container",
		"body": [
			"import * as React from 'react';",
			"import { connect } from 'react-redux';",
			"import { bindActionCreators, Dispatch } from 'redux';",
			"import { withRouter, RouteComponentProps } from 'react-router-dom';",
			"import { ${2:__ModelName__}Model } from 'types/modelTypes/${2:__ModelName__}Model';",
			"import I${2:__ModelName__}Action from 'actions/interfaces/I${2:__ModelName__}Action';",
			"import * as ${2:__ModelName__}Actions from 'actions/${2:__ModelName__}Actions';",
			"import StoreStateType from 'types/StateTypes/StoreStateType';",
			"import * as toastr from 'toastr';",
			"",
			"class ${1:__ComponentName__} extends React.Component<ThisPropsType, ThisStateType> {",
			"  constructor(props: ThisPropsType) {",
			"    super(props as any);",
			"    this.state = {",
			"      ${2:__ModelName__}Array: this.props.${2:__ModelName__}Array",
			"    };",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <div className=\"container mt-1\">",
			"        ${1:__ComponentName__} works.",
			"      </div>",
			"    );",
			"  }",
			"",
			"  componentWillMount() {",
			"    //",
			"  }",
			"",
			"  componentDidMount() {",
			"    //",
			"  }",
			"",
			"  componentWillReceiveProps(nextProps: StateToPropsType) {",
			"    this.setState({ ${2:__ModelName__}Array: nextProps.${2:__ModelName__}Array });",
			"  }",
			"",
			"  componentDidUpdate() {",
			"    //",
			"  }",
			"",
			"  // Build in delete function, remove it if not needed.",
			"  // on${2:__ModelName__}Delete = (${2:__ModelName__}: ${2:__ModelName__}Model) => {",
			"  //    this.props.actions.delete${2:__ModelName__}(${2:__ModelName__})",
			"  //    .then(() => {",
			"  //        toastr.success('${2:__ModelName__} deleted.');",
			"  //    });",
			"  // }",
			"  //",
			"}",
			"",
			"function mapStateToProps(storeState: StoreStateType, ownProps: OwnProps): StateToPropsType {",
			"  return {",
			"    ${2:__ModelName__}Array: storeState.${2:__ModelName__}Array",
			"  };",
			"}",
			"",
			"function mapDispatchToProps(dispatch: Dispatch<I${2:__ModelName__}Action>): DispatchToPropsType {",
			"  return {",
			"    actions: bindActionCreators(${2:__ModelName__}Actions, dispatch)",
			"  };",
			"}",
			"",
			"type ThisStateType = {",
			"  ${2:__ModelName__}Array: ${2:__ModelName__}Model[]",
			"};",
			"",
			"type StateToPropsType = {",
			"  ${2:__ModelName__}Array: ${2:__ModelName__}Model[];",
			"};",
			"",
			"type DispatchToPropsType = {",
			"  actions: typeof ${2:__ModelName__}Actions;",
			"};",
			"",
			"type RCProps = RouteComponentProps<{ id: number }>;",
			"",
			"type OwnProps = {",
			"} & RCProps;",
			"",
			"type ThisPropsType = StateToPropsType & DispatchToPropsType & OwnProps;",
			"",
			"export default withRouter(connect<StateToPropsType, DispatchToPropsType, OwnProps>(mapStateToProps, mapDispatchToProps)(${1:__ComponentName__}));",
			""
		],
		"description": "Create a container component. (TSX)"
	},
	"ReactJS : TSX : Component : Container : WithStyles": {
		"prefix": "ccReactJS_TSX_Component_Container_WithStyles",
		"body": [
			"import * as React from 'react';",
			"import { connect } from 'react-redux';",
			"import { Dispatch } from 'redux';",
			"import { withStyles, WithStyles, StyleRules, Theme } from 'material-ui/styles';",
			"",
			"const decorate = withStyles((theme: Theme) => {",
			"  const styles: StyleRules = {",
			"    root: {",
			"      flexGrow: 1,",
			"      zIndex: 1,",
			"      overflow: 'hidden',",
			"      position: 'relative',",
			"      display: 'flex',",
			"    },",
			"  };",
			"  return styles;",
			"}, { withTheme: true });",
			"",
			"export const ${1:__ModelName__} = decorate<ThisPropsType>(",
			"  class InnerClass extends React.Component<ThisPropsType & WithStyles<'root'>, ThisStateType> {",
			"    constructor(props: ThisPropsType) {",
			"      super(props as any);",
			"      this.state = {",
			"      };",
			"    }",
			"",
			"    render() {",
			"      return (",
			"        <div className={this.props.classes.root}>",
			"          ${1:__ModelName__} works.",
			"        </div>",
			"      );",
			"    }",
			"  }",
			");",
			"",
			"function mapStateToProps(state: StateToPropsType): StateToPropsType {",
			"  return {",
			"  };",
			"}",
			"",
			"function mapDispatchToProps(dispatch: Dispatch<any>): DispatchToPropsType {",
			"  return {",
			"  };",
			"}",
			"",
			"type ThisStateType = {",
			"};",
			"",
			"type StateToPropsType = {",
			"};",
			"",
			"type DispatchToPropsType = {",
			"};",
			"",
			"type ThisPropsType = StateToPropsType & DispatchToPropsType;",
			"",
			"export default connect<StateToPropsType, DispatchToPropsType>(mapStateToProps, mapDispatchToProps)(${1:__ModelName__});",
			""
		],
		"description": "Create a container component with 'WithStyles'. (TSX)"
	},
	"ReactJS : TSX : Component : Presentational": {
		"prefix": "ccReactJS_TSX_Component_Presentational",
		"body": [
			"import * as React from 'react';\r",
			"import { ${2:__ComponentModelName__}Model } from 'types/modelTypes/${2:__ComponentModelName__}Model';\r",
			"\r",
			"type ${1:__ComponentName__}Props = {\r",
			"  ${2:__ComponentModelName__}: ${2:__ComponentModelName__}Model\r",
			"};\r",
			"\r",
			"const ${1:__ComponentName__} = (props: ${1:__ComponentName__}Props) => {\r",
			"  return (\r",
			"    <div>\r",
			"      ${1:__ComponentName__} working.\r",
			"    </div>\r",
			"  );\r",
			"};\r",
			"\r",
			"export default ${1:__ComponentName__};\r",
			""
		],
		"description": "Create a presentational component. (TSX)"
	},
	"ReactJS : TSX : Component : ListComponent": {
		"prefix": "ccReactJS_TSX_Component_ListComponent",
		"body": [
			"import * as React from 'react';",
			"import { ${1:__ComponentName__}Model } from 'types/modelTypes/${1:__ComponentName__}Model';",
			"import ReactTable from 'react-table';",
			"import 'react-table/react-table.css';",
			"import { Link } from 'react-router-dom';",
			"",
			"const ${1:__ComponentName__}List = (props: ${1:__ComponentName__}ListProps) => {",
			"  const columns = [",
			"    {",
			"      Header: 'Id',",
			"      accessor: 'id'",
			"    },",
			"    {",
			"      Header: 'Name',",
			"      accessor: '${1:__ComponentName__}Name',",
			"      Cell: (d: any) => <span className=\"${1:__ComponentName__}Name\">{d.value}</span>",
			"    },",
			"    {",
			"      Header: '',",
			"      id: 'btn_details',",
			"      Cell: (d: any) => <Link to={`/${1:__ComponentName__}/${d.original.id}`} className=\"btn btn-outline-success btn-sm mx-1\" > Details</Link>,",
			"      filterable: false,",
			"      maxWidth: 75",
			"    },",
			"    {",
			"      Header: '',",
			"      id: 'btn_delete',",
			"      Cell: (d: any) => <input type=\"button\" className=\"btn btn-outline-danger btn-sm mx-1\" onClick={() => { props.on${1:__ComponentName__}Delete(d.original); }} value=\"Delete\" />,",
			"      filterable: false,",
			"      maxWidth: 75",
			"    }",
			"  ];",
			"",
			"  return (",
			"",
			"    <div>",
			"      {/* List of ${1:__ComponentName__}s */}",
			"      <ReactTable",
			"        data={props.${1:__ComponentName__}Array}",
			"        columns={columns}",
			"        defaultPageSize={10}",
			"        minRows={3}",
			"        filterable",
			"        defaultFilterMethod={(filter, row) => String(row[filter.id]).includes(filter.value)}",
			"      />",
			"    </div>",
			"  );",
			"};",
			"",
			"type ${1:__ComponentName__}ListProps = {",
			"  ${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"  on${1:__ComponentName__}Delete: (${1:__ComponentName__}: ${1:__ComponentName__}Model) => void;",
			"};",
			"",
			"export default ${1:__ComponentName__}List;",
			""
		],
		"description": "Create a list component (TSX)"
	},
	"ReactJS : TSX : Component : DetailComponent": {
		"prefix": "ccReactJS_TSX_Component_DetailComponent",
		"body": [
			"import * as React from 'react';\r",
			"import { connect } from 'react-redux';\r",
			"import { bindActionCreators, Dispatch } from 'redux';\r",
			"import { withRouter, RouteComponentProps } from 'react-router-dom';\r",
			"import Store from 'store/store';\r",
			"import { ${1:__ModelName__}Model } from 'types/modelTypes/${1:__ModelName__}Model';\r",
			"import I${1:__ModelName__}Action from 'actions/interfaces/I${1:__ModelName__}Action';\r",
			"import * as ${1:__ModelName__}Actions from 'actions/${1:__ModelName__}Actions';\r",
			"import StoreStateType from 'types/StateTypes/StoreStateType';\r",
			"import CCTextField from 'components/CommonComponent/CCTextField';\r",
			"import * as toastr from 'toastr';\r",
			"const UUID = require('uuid/v4');\r",
			"\r",
			"class ${1:__ModelName__}Detail extends React.Component<ThisPropsType, ThisStateType> {\r",
			"  constructor(props: StateToPropsType) {\r",
			"    super(props as any);\r",
			"    this.state = {\r",
			"      ${1:__ModelName__}Array: this.props.${1:__ModelName__}Array,\r",
			"      current${1:__ModelName__}: this.props.current${1:__ModelName__},\r",
			"      errors: [],\r",
			"      isNew${1:__ModelName__}: this.props.isNew${1:__ModelName__},\r",
			"      isFormSaving: false,\r",
			"      textFields: {\r",
			"        id: (this.props.current${1:__ModelName__}.id !== undefined) ? this.props.current${1:__ModelName__}.id : '',\r",
			"        ${1:__ModelName__}Name: (this.props.current${1:__ModelName__}.${1:__ModelName__}Name !== undefined) ? this.props.current${1:__ModelName__}.${1:__ModelName__}Name : '',\r",
			"        ${1:__ModelName__}Description: (this.props.current${1:__ModelName__}.${1:__ModelName__}Description !== undefined) ? this.props.current${1:__ModelName__}.${1:__ModelName__}Description : ''\r",
			"      },\r",
			"      textFieldsErrors: {}\r",
			"    };\r",
			"  }\r",
			"\r",
			"  render() {\r",
			"    return (\r",
			"      <div className=\"container mt-3\">\r",
			"        <form onSubmit={this.onFormSubmit}>\r",
			"          <div id=\"\" className=\"\">\r",
			"            <input type=\"button\" className=\"btn btn-outline-warning btn-sm\" onClick={() => { this.props.history.push('/${1:__ModelName__}s'); }} value={'<= Go Back'} />\r",
			"            <input\r",
			"              type=\"submit\"\r",
			"              className=\"btn btn-outline-success btn-sm mx-1 float-right\"\r",
			"              value={this.state.isNew${1:__ModelName__} ? 'Add' : 'Update'}\r",
			"            />\r",
			"          </div>\r",
			"          <h4 className=\"my-3\">${1:__ModelName__}</h4>\r",
			"          <div className=\"\">\r",
			"            <div className=\"form-row\">\r",
			"              <div className=\"col\">\r",
			"                <CCTextField\r",
			"                  fieldName=\"id\"\r",
			"                  label=\"${1:__ModelName__} ID\"\r",
			"                  value={this.state.textFields.id}\r",
			"                  onChange={this.onTextFieldChange}\r",
			"                />\r",
			"              </div>\r",
			"              <div className=\"col\">\r",
			"                <CCTextField\r",
			"                  fieldName=\"${1:__ModelName__}Name\"\r",
			"                  label=\"${1:__ModelName__} Name\"\r",
			"                  value={this.state.textFields.${1:__ModelName__}Name}\r",
			"                  isRequired={true}\r",
			"                  isRequiredErrorMessage=\"${1:__ModelName__} Name is required....\"\r",
			"                  onChange={this.onTextFieldChange}\r",
			"                  validate={(value) => value.length > 2 ? false : '${1:__ModelName__} name cannot less than 3 letters.'}\r",
			"                />\r",
			"              </div>\r",
			"              <div className=\"col\">\r",
			"                <CCTextField\r",
			"                  fieldName=\"${1:__ModelName__}Description\"\r",
			"                  label=\"Description\"\r",
			"                  value={this.state.textFields.${1:__ModelName__}Description}\r",
			"                  isRequired={false}\r",
			"                  isRequiredErrorMessage=\"\"\r",
			"                  onChange={this.onTextFieldChange}\r",
			"                  validate={(value) => value.length < 300 ? false : 'Description should less than 300 characters.'}\r",
			"                />\r",
			"              </div>\r",
			"            </div>\r",
			"          </div>\r",
			"        </form>\r",
			"      </div>\r",
			"    );\r",
			"  }\r",
			"\r",
			"  componentWillMount() {\r",
			"    // Store.dispatch(${1:__ModelName__}Actions.getAll${1:__ModelName__}s());\r",
			"  }\r",
			"\r",
			"  componentDidMount() {\r",
			"    // if the component is loaded through browser url instead of <Link>, reload all data\r",
			"    if (this.state.${1:__ModelName__}Array.length === 0) {\r",
			"      Store.dispatch(${1:__ModelName__}Actions.getAll${1:__ModelName__}());\r",
			"    }\r",
			"  }\r",
			"\r",
			"  componentWillReceiveProps(nextProps: StateToPropsType) {\r",
			"    console.log(`nextProps:`);\r",
			"    console.log(nextProps);\r",
			"    // Set current selected ${1:__ModelName__} to state\r",
			"    if (nextProps.current${1:__ModelName__} !== undefined) {\r",
			"      this.setState({\r",
			"        current${1:__ModelName__}: Object.assign({}, nextProps.current${1:__ModelName__}),\r",
			"        textFields: {\r",
			"          id: nextProps.current${1:__ModelName__}.id ? nextProps.current${1:__ModelName__}.id : '',\r",
			"          ${1:__ModelName__}Name: nextProps.current${1:__ModelName__}.${1:__ModelName__}Name ? nextProps.current${1:__ModelName__}.${1:__ModelName__}Name : '',\r",
			"          ${1:__ModelName__}Description: nextProps.current${1:__ModelName__}.${1:__ModelName__}Description ? nextProps.current${1:__ModelName__}.${1:__ModelName__}Description : ''\r",
			"        }\r",
			"      });\r",
			"    }\r",
			"    this.setState({ ${1:__ModelName__}Array: nextProps.${1:__ModelName__}Array });\r",
			"  }\r",
			"\r",
			"  componentDidUpdate() {\r",
			"    //\r",
			"\r",
			"  }\r",
			"\r",
			"  onTextFieldChange = (fieldName: string, value: string, error: string | boolean) => {\r",
			"    const textFields = this.state.textFields;\r",
			"    const textFieldsErrors = this.state.textFieldsErrors;\r",
			"\r",
			"    textFields[fieldName] = value;\r",
			"    textFieldsErrors[fieldName] = error;\r",
			"\r",
			"    this.setState({ textFields, textFieldsErrors });\r",
			"  }\r",
			"\r",
			"  onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r",
			"    event.preventDefault();\r",
			"    const ${1:__ModelName__}: ${1:__ModelName__}Model = new ${1:__ModelName__}Model();\r",
			"    ${1:__ModelName__}.id = this.state.textFields.id ? this.state.textFields.id : UUID();\r",
			"    ${1:__ModelName__}.${1:__ModelName__}Name = this.state.textFields.${1:__ModelName__}Name;\r",
			"    ${1:__ModelName__}.${1:__ModelName__}Description = this.state.textFields.${1:__ModelName__}Description;\r",
			"\r",
			"    if (!this.isFormValid()) {\r",
			"      return;\r",
			"    }\r",
			"\r",
			"    this.setState({ isFormSaving: true });\r",
			"\r",
			"    if (this.state.isNew${1:__ModelName__}) {\r",
			"      this.props.actions.addNew${1:__ModelName__}(${1:__ModelName__})\r",
			"        .then((res: any) => {\r",
			"          this.redirectTo${1:__ModelName__}sComponent();\r",
			"        })\r",
			"        .catch((error: string) => {\r",
			"          this.catchError(error);\r",
			"        });\r",
			"    } else {\r",
			"      this.props.actions.update${1:__ModelName__}(${1:__ModelName__})\r",
			"        .then(() => {\r",
			"          this.redirectTo${1:__ModelName__}sComponent();\r",
			"        })\r",
			"        .catch((error: string) => {\r",
			"          this.catchError(error);\r",
			"        });\r",
			"    }\r",
			"  }\r",
			"\r",
			"  redirectTo${1:__ModelName__}sComponent() {\r",
			"    this.setState({ isFormSaving: false });\r",
			"    toastr.success(this.state.isNew${1:__ModelName__} ? 'New ${1:__ModelName__} added.' : '${1:__ModelName__} updated.');\r",
			"    this.props.history.push('/${1:__ModelName__}s');\r",
			"  }\r",
			"\r",
			"  catchError(error: string) {\r",
			"    this.setState({ isFormSaving: false });\r",
			"    toastr.error(error);\r",
			"  }\r",
			"\r",
			"  isFormValid() {\r",
			"    const textFields = this.state.textFields;\r",
			"    const textFieldsErrors = this.state.textFieldsErrors;\r",
			"    const errorMessages = Object.keys(textFieldsErrors).filter((k) => textFieldsErrors[k]);\r",
			"\r",
			"    if (!textFields.${1:__ModelName__}Name) {\r",
			"      return false;\r",
			"    }\r",
			"\r",
			"    if (errorMessages.length) {\r",
			"      return false;\r",
			"    }\r",
			"\r",
			"    return true;\r",
			"  }\r",
			"}\r",
			"\r",
			"function get${1:__ModelName__}ById(${1:__ModelName__}s: ${1:__ModelName__}Model[], ${1:__ModelName__}Id: string) {\r",
			"  const ${1:__ModelName__} = ${1:__ModelName__}s.filter((s: ${1:__ModelName__}Model) => s.id === ${1:__ModelName__}Id);\r",
			"  if (${1:__ModelName__}) { return ${1:__ModelName__}[0]; }\r",
			"  return new ${1:__ModelName__}Model();\r",
			"}\r",
			"\r",
			"function mapStateToProps(storeState: StoreStateType, ownProps: OwnProps): StateToPropsType {\r",
			"  const ${1:__ModelName__}Id = ownProps.match.params.${1:__ModelName__}Id;\r",
			"  let current${1:__ModelName__} = new ${1:__ModelName__}Model();\r",
			"  let isNew${1:__ModelName__} = ${1:__ModelName__}Id === undefined;\r",
			"\r",
			"  if (${1:__ModelName__}Id && storeState.${1:__ModelName__}Array.length > 0) {\r",
			"    current${1:__ModelName__} = get${1:__ModelName__}ById(storeState.${1:__ModelName__}Array, ${1:__ModelName__}Id);\r",
			"    isNew${1:__ModelName__} = false;\r",
			"  }\r",
			"\r",
			"  return {\r",
			"    ${1:__ModelName__}Array: storeState.${1:__ModelName__}Array,\r",
			"    current${1:__ModelName__}: current${1:__ModelName__},\r",
			"    isNew${1:__ModelName__}: isNew${1:__ModelName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"function mapDispatchToProps(dispatch: Dispatch<I${1:__ModelName__}Action>): DispatchToPropsType {\r",
			"  return {\r",
			"    actions: bindActionCreators(${1:__ModelName__}Actions, dispatch)\r",
			"  };\r",
			"}\r",
			"\r",
			"type ThisStateType = {\r",
			"  ${1:__ModelName__}Array: Array<${1:__ModelName__}Model>;\r",
			"  current${1:__ModelName__}: ${1:__ModelName__}Model;\r",
			"  errors: string[],\r",
			"  isNew${1:__ModelName__}: boolean,\r",
			"  isFormSaving: boolean;\r",
			"  textFields: {\r",
			"    id: string;\r",
			"    ${1:__ModelName__}Name: string;\r",
			"    ${1:__ModelName__}Description: string;\r",
			"  },\r",
			"  textFieldsErrors: {}\r",
			"};\r",
			"\r",
			"type StateToPropsType = {\r",
			"  ${1:__ModelName__}Array: Array<${1:__ModelName__}Model>;\r",
			"  current${1:__ModelName__}: ${1:__ModelName__}Model;\r",
			"  errors?: Object;\r",
			"  isNew${1:__ModelName__}: boolean;\r",
			"  isFormSaving?: boolean;\r",
			"};\r",
			"\r",
			"type DispatchToPropsType = {\r",
			"  actions: typeof ${1:__ModelName__}Actions;\r",
			"};\r",
			"\r",
			"type RCProps = RouteComponentProps<{ ${1:__ModelName__}Id: string }>;\r",
			"\r",
			"type OwnProps = {\r",
			"} & RCProps;\r",
			"\r",
			"type ThisPropsType = StateToPropsType & DispatchToPropsType & OwnProps;\r",
			"\r",
			"export default withRouter(connect<StateToPropsType, DispatchToPropsType, OwnProps>(mapStateToProps, mapDispatchToProps)(${1:__ModelName__}Detail));\r",
			""
		],
		"description": "Create a detail component (TSX)"
	},
	"ReactJS : TSX : Component : Main : MaterialUI": {
		"prefix": "ReactJS_TSX_Component_Main_MaterialUI",
		"body": [
			"import * as ${1:__ComponentName__}Actions from 'Actions/${1:__ComponentName__}Actions';",
			"import I${1:__ComponentName__}Action from 'Actions/Interfaces/I${1:__ComponentName__}Action';",
			"import * as React from 'react';",
			"import { connect } from 'react-redux';",
			"import { Link, RouteComponentProps, withRouter } from 'react-router-dom';",
			"import { bindActionCreators, Dispatch } from 'redux';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"import StoreStateType from 'Types/StateTypes/StoreStateType';",
			"import ${1:__ComponentName__}List from './${1:__ComponentName__}List';",
			"",
			"class ${1:__ComponentName__}Management extends React.Component<",
			"\tIThisPropsInterface,",
			"\tIThisStateInterface",
			"> {",
			"\tconstructor(props: IThisPropsInterface) {",
			"\t\tsuper(props as any);",
			"\t\tthis.state = {",
			"\t\t\t${1:__ComponentName__}Array: props.${1:__ComponentName__}Array",
			"\t\t};",
			"\t}",
			"",
			"\tpublic render() {",
			"\t\treturn (",
			"\t\t\t<div className=\"container my-3\">",
			"\t\t\t\t<Link",
			"\t\t\t\t\tto=\"/Sample/${1:__ComponentName__}\"",
			"\t\t\t\t\tclassName=\"btn btn-outline-primary btn-sm my-3\"",
			"\t\t\t\t>",
			"\t\t\t\t\tAdd New Chair{' '}",
			"\t\t\t\t</Link>",
			"\t\t\t\t<${1:__ComponentName__}List",
			"\t\t\t\t\t${1:__ComponentName__}Array={this.state.${1:__ComponentName__}Array}",
			"\t\t\t\t\ton${1:__ComponentName__}Delete={this.on${1:__ComponentName__}Delete}",
			"\t\t\t\t/>",
			"\t\t\t</div>",
			"\t\t);",
			"\t}",
			"",
			"\tpublic componentWillMount() {",
			"\t\t//",
			"\t}",
			"",
			"\tpublic componentDidMount() {",
			"\t\tthis.props.actions.getAll${1:__ComponentName__}();",
			"\t}",
			"",
			"\tpublic componentWillReceiveProps(nextProps: IStateToPropsInterface) {",
			"\t\tthis.setState({ ${1:__ComponentName__}Array: nextProps.${1:__ComponentName__}Array });",
			"\t}",
			"",
			"\tpublic componentDidUpdate() {",
			"\t\t//",
			"\t}",
			"",
			"\tprivate on${1:__ComponentName__}Delete = (${1:__ComponentName__}: ${1:__ComponentName__}Model) => {",
			"\t\tthis.props.actions.delete${1:__ComponentName__}(${1:__ComponentName__}).then(() => {",
			"\t\t\t//",
			"\t\t});",
			"\t};",
			"}",
			"",
			"function mapStateToProps(",
			"\tstoreState: StoreStateType,",
			"\townProps: OwnProps",
			"): IStateToPropsInterface {",
			"\treturn {",
			"\t\t${1:__ComponentName__}Array: storeState.${1:__ComponentName__}Module.${1:__ComponentName__}Array",
			"\t};",
			"}",
			"",
			"function mapDispatchToProps(",
			"\tdispatch: Dispatch<I${1:__ComponentName__}Action>",
			"): IDispatchToPropsInterface {",
			"\treturn {",
			"\t\tactions: bindActionCreators(${1:__ComponentName__}Actions, dispatch)",
			"\t};",
			"}",
			"",
			"interface IThisStateInterface {",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"}",
			"",
			"interface IStateToPropsInterface {",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"}",
			"",
			"interface IDispatchToPropsInterface {",
			"\tactions: typeof ${1:__ComponentName__}Actions;",
			"}",
			"",
			"type RCProps = RouteComponentProps<{ id: number }>;",
			"",
			"type OwnProps = {} & RCProps;",
			"",
			"type IThisPropsInterface = IStateToPropsInterface &",
			"\tIDispatchToPropsInterface &",
			"\tOwnProps;",
			"",
			"export default withRouter(",
			"\tconnect<IStateToPropsInterface, IDispatchToPropsInterface, OwnProps>(",
			"\t\tmapStateToProps,",
			"\t\tmapDispatchToProps",
			"\t)(${1:__ComponentName__}Management)",
			");",
			""
		],
		"description": "Create a ReactJS Component - Main"
	},
	"ReactJS : TSX : Component : List : MaterialUI": {
		"prefix": "ReactJS_TSX_Component_List_MaterialUI",
		"body": [
			"import * as React from 'react';",
			"import { Link } from 'react-router-dom';",
			"import ReactTable from 'react-table';",
			"import 'react-table/react-table.css';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"",
			"const ${1:__ComponentName__}List = (props: ${1:__ComponentName__}ListProps) => {",
			"\tconsole.log(`props:`, props);",
			"\tconst columns = [",
			"\t\t{",
			"\t\t\tHeader: 'Id',",
			"\t\t\taccessor: 'id'",
			"\t\t},",
			"\t\t{",
			"\t\t\tCell: (d: any) => <span className=\"${1:__ComponentName__}Name\">{d.value}</span>,",
			"\t\t\tHeader: 'Name',",
			"\t\t\taccessor: '${1:__ComponentName__}Name'",
			"\t\t},",
			"\t\t{",
			"\t\t\tCell: (d: any) => (",
			"\t\t\t\t<Link",
			"\t\t\t\t\tto={`/Sample/${1:__ComponentName__}/${d.original.id}`}",
			"\t\t\t\t\tclassName=\"btn btn-outline-success btn-sm mx-1\"",
			"\t\t\t\t>",
			"\t\t\t\t\t{' '}",
			"\t\t\t\t\tDetails",
			"\t\t\t\t</Link>",
			"\t\t\t),",
			"\t\t\tHeader: '',",
			"\t\t\tfilterable: false,",
			"\t\t\tid: 'btn_details',",
			"\t\t\tmaxWidth: 75",
			"\t\t},",
			"\t\t{",
			"\t\t\tCell: (d: any) => (",
			"\t\t\t\t<input",
			"\t\t\t\t\ttype=\"button\"",
			"\t\t\t\t\tclassName=\"btn btn-outline-danger btn-sm mx-1\"",
			"\t\t\t\t\tonClick={() => {",
			"\t\t\t\t\t\tprops.on${1:__ComponentName__}Delete(d.original);",
			"\t\t\t\t\t}}",
			"\t\t\t\t\tvalue=\"Delete\"",
			"\t\t\t\t/>",
			"\t\t\t),",
			"\t\t\tHeader: '',",
			"\t\t\tfilterable: false,",
			"\t\t\tid: 'btn_delete',",
			"\t\t\tmaxWidth: 75",
			"\t\t}",
			"\t];",
			"",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t{/* List of ${1:__ComponentName__}s */}",
			"\t\t\t{console.log(`props.${1:__ComponentName__}Array:`, props)}",
			"\t\t\t<ReactTable",
			"\t\t\t\tdata={props.${1:__ComponentName__}Array ? props.${1:__ComponentName__}Array : undefined}",
			"\t\t\t\tcolumns={columns}",
			"\t\t\t\tdefaultPageSize={10}",
			"\t\t\t\tminRows={3}",
			"\t\t\t\tfilterable",
			"\t\t\t\tdefaultFilterMethod={(filter, row) =>",
			"\t\t\t\t\tString(row[filter.id]).includes(filter.value)",
			"\t\t\t\t}",
			"\t\t\t/>",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"interface ${1:__ComponentName__}ListProps {",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"\ton${1:__ComponentName__}Delete: (${1:__ComponentName__}: ${1:__ComponentName__}Model) => void;",
			"}",
			"",
			"export default ${1:__ComponentName__}List;",
			""
		],
		"description": "Create a ReactJS Component - List"
	},
	"ReactJS : TSX : Component : Details : MaterialUI": {
		"prefix": "ReactJS_TSX_Component_Details_MaterialUI",
		"body": [
			"import * as ${1:__ComponentName__}Actions from 'Actions/${1:__ComponentName__}Actions';",
			"import I${1:__ComponentName__}Action from 'Actions/Interfaces/I${1:__ComponentName__}Action';",
			"import CCTextField from 'Components/Common/CCTextField';",
			"import * as React from 'react';",
			"import { connect } from 'react-redux';",
			"import { RouteComponentProps, withRouter } from 'react-router-dom';",
			"import { bindActionCreators, Dispatch } from 'redux';",
			"import Store from 'Store/Store';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"import StoreStateType from 'Types/StateTypes/StoreStateType';",
			"import { v4 } from 'uuid';",
			"",
			"class ${1:__ComponentName__}Detail extends React.Component<ThisPropsType, ThisStateType> {",
			"\tconstructor(props: StateToPropsType) {",
			"\t\tsuper(props as any);",
			"\t\tthis.state = {",
			"\t\t\t${1:__ComponentName__}Array: this.props.${1:__ComponentName__}Array,",
			"\t\t\tcurrent${1:__ComponentName__}: this.props.current${1:__ComponentName__},",
			"\t\t\terrors: [],",
			"\t\t\tisFormSaving: false,",
			"\t\t\tisNew${1:__ComponentName__}: this.props.isNew${1:__ComponentName__},",
			"\t\t\ttextFields: {",
			"\t\t\t\t${1:__ComponentName__}Description:",
			"\t\t\t\t\tthis.props.current${1:__ComponentName__}.${1:__ComponentName__}Description !== undefined",
			"\t\t\t\t\t\t? this.props.current${1:__ComponentName__}.${1:__ComponentName__}Description",
			"\t\t\t\t\t\t: '',",
			"\t\t\t\t${1:__ComponentName__}Name:",
			"\t\t\t\t\tthis.props.current${1:__ComponentName__}.${1:__ComponentName__}Name !== undefined",
			"\t\t\t\t\t\t? this.props.current${1:__ComponentName__}.${1:__ComponentName__}Name",
			"\t\t\t\t\t\t: '',",
			"\t\t\t\tid:",
			"\t\t\t\t\tthis.props.current${1:__ComponentName__}.id !== undefined",
			"\t\t\t\t\t\t? this.props.current${1:__ComponentName__}.id",
			"\t\t\t\t\t\t: ''",
			"\t\t\t},",
			"\t\t\ttextFieldsErrors: {}",
			"\t\t};",
			"\t}",
			"",
			"\tpublic render() {",
			"\t\treturn (",
			"\t\t\t<div className=\"container mt-3\">",
			"\t\t\t\t<form onSubmit={this.onFormSubmit}>",
			"\t\t\t\t\t<div id=\"\" className=\"\">",
			"\t\t\t\t\t\t<input",
			"\t\t\t\t\t\t\ttype=\"button\"",
			"\t\t\t\t\t\t\tclassName=\"btn btn-outline-warning btn-sm\"",
			"\t\t\t\t\t\t\tonClick={() => {",
			"\t\t\t\t\t\t\t\tthis.props.history.push('/Sample/${1:__ComponentName__}s');",
			"\t\t\t\t\t\t\t}}",
			"\t\t\t\t\t\t\tvalue={'<= Go Back'}",
			"\t\t\t\t\t\t/>",
			"\t\t\t\t\t\t<input",
			"\t\t\t\t\t\t\ttype=\"submit\"",
			"\t\t\t\t\t\t\tclassName=\"btn btn-outline-success btn-sm mx-1 float-right\"",
			"\t\t\t\t\t\t\tvalue={this.state.isNew${1:__ComponentName__} ? 'Add' : 'Update'}",
			"\t\t\t\t\t\t/>",
			"\t\t\t\t\t</div>",
			"\t\t\t\t\t<h4 className=\"my-3\">${1:__ComponentName__}</h4>",
			"\t\t\t\t\t<div className=\"\">",
			"\t\t\t\t\t\t<div className=\"form-row\">",
			"\t\t\t\t\t\t\t<div className=\"col\">",
			"\t\t\t\t\t\t\t\t<CCTextField",
			"\t\t\t\t\t\t\t\t\tfieldName=\"id\"",
			"\t\t\t\t\t\t\t\t\tlabel=\"${1:__ComponentName__} ID\"",
			"\t\t\t\t\t\t\t\t\tvalue={this.state.textFields.id}",
			"\t\t\t\t\t\t\t\t\tonChange={this.onTextFieldChange}",
			"\t\t\t\t\t\t\t\t/>",
			"\t\t\t\t\t\t\t</div>",
			"\t\t\t\t\t\t\t<div className=\"col\">",
			"\t\t\t\t\t\t\t\t<CCTextField",
			"\t\t\t\t\t\t\t\t\tfieldName=\"${1:__ComponentName__}Name\"",
			"\t\t\t\t\t\t\t\t\tlabel=\"${1:__ComponentName__} Name\"",
			"\t\t\t\t\t\t\t\t\tvalue={this.state.textFields.${1:__ComponentName__}Name}",
			"\t\t\t\t\t\t\t\t\tisRequired={true}",
			"\t\t\t\t\t\t\t\t\tisRequiredErrorMessage=\"${1:__ComponentName__} Name is required....\"",
			"\t\t\t\t\t\t\t\t\tonChange={this.onTextFieldChange}",
			"\t\t\t\t\t\t\t\t\tvalidate={(value) =>",
			"\t\t\t\t\t\t\t\t\t\tvalue.length > 2",
			"\t\t\t\t\t\t\t\t\t\t\t? false",
			"\t\t\t\t\t\t\t\t\t\t\t: '${1:__ComponentName__} name cannot less than 3 letters.'",
			"\t\t\t\t\t\t\t\t\t}",
			"\t\t\t\t\t\t\t\t/>",
			"\t\t\t\t\t\t\t</div>",
			"\t\t\t\t\t\t\t<div className=\"col\">",
			"\t\t\t\t\t\t\t\t<CCTextField",
			"\t\t\t\t\t\t\t\t\tfieldName=\"${1:__ComponentName__}Description\"",
			"\t\t\t\t\t\t\t\t\tlabel=\"Description\"",
			"\t\t\t\t\t\t\t\t\tvalue={this.state.textFields.${1:__ComponentName__}Description}",
			"\t\t\t\t\t\t\t\t\tisRequired={false}",
			"\t\t\t\t\t\t\t\t\tisRequiredErrorMessage=\"\"",
			"\t\t\t\t\t\t\t\t\tonChange={this.onTextFieldChange}",
			"\t\t\t\t\t\t\t\t\tvalidate={(value) =>",
			"\t\t\t\t\t\t\t\t\t\tvalue.length < 300",
			"\t\t\t\t\t\t\t\t\t\t\t? false",
			"\t\t\t\t\t\t\t\t\t\t\t: 'Description should less than 300 characters.'",
			"\t\t\t\t\t\t\t\t\t}",
			"\t\t\t\t\t\t\t\t/>",
			"\t\t\t\t\t\t\t</div>",
			"\t\t\t\t\t\t</div>",
			"\t\t\t\t\t</div>",
			"\t\t\t\t</form>",
			"\t\t\t</div>",
			"\t\t);",
			"\t}",
			"",
			"\tpublic componentWillMount() {",
			"\t\t//",
			"\t}",
			"",
			"\tpublic componentDidMount() {",
			"\t\t// if the component is loaded through browser url instead of <Link>, reload all data",
			"\t\tif (this.state.${1:__ComponentName__}Array.length === 0) {",
			"\t\t\tStore.dispatch(${1:__ComponentName__}Actions.getAll${1:__ComponentName__}());",
			"\t\t}",
			"\t}",
			"",
			"\tpublic componentWillReceiveProps(nextProps: StateToPropsType) {",
			"\t\t// Set current selected ${1:__ComponentName__} to state",
			"\t\tif (nextProps.current${1:__ComponentName__} !== undefined) {",
			"\t\t\tthis.setState({",
			"\t\t\t\tcurrent${1:__ComponentName__}: { ...nextProps.current${1:__ComponentName__} },",
			"\t\t\t\ttextFields: {",
			"\t\t\t\t\t${1:__ComponentName__}Description: nextProps.current${1:__ComponentName__}.${1:__ComponentName__}Description",
			"\t\t\t\t\t\t? nextProps.current${1:__ComponentName__}.${1:__ComponentName__}Description",
			"\t\t\t\t\t\t: '',",
			"\t\t\t\t\t${1:__ComponentName__}Name: nextProps.current${1:__ComponentName__}.${1:__ComponentName__}Name",
			"\t\t\t\t\t\t? nextProps.current${1:__ComponentName__}.${1:__ComponentName__}Name",
			"\t\t\t\t\t\t: '',",
			"\t\t\t\t\tid: nextProps.current${1:__ComponentName__}.id ? nextProps.current${1:__ComponentName__}.id : ''",
			"\t\t\t\t}",
			"\t\t\t});",
			"\t\t}",
			"\t\tthis.setState({ ${1:__ComponentName__}Array: nextProps.${1:__ComponentName__}Array });",
			"\t}",
			"",
			"\tpublic componentDidUpdate() {",
			"\t\t//",
			"\t}",
			"",
			"\tpublic onTextFieldChange = (",
			"\t\tfieldName: string,",
			"\t\tvalue: string,",
			"\t\terror: string | boolean",
			"\t) => {",
			"\t\tconst textFields = this.state.textFields;",
			"\t\tconst textFieldsErrors = this.state.textFieldsErrors;",
			"",
			"\t\ttextFields[fieldName] = value;",
			"\t\ttextFieldsErrors[fieldName] = error;",
			"",
			"\t\tthis.setState({ textFields, textFieldsErrors });",
			"\t};",
			"",
			"\tpublic onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {",
			"\t\tevent.preventDefault();",
			"\t\tconst ${1:__ComponentName__}: ${1:__ComponentName__}Model = new ${1:__ComponentName__}Model();",
			"\t\t${1:__ComponentName__}.id = this.state.textFields.id ? this.state.textFields.id : v4();",
			"\t\t${1:__ComponentName__}.${1:__ComponentName__}Name = this.state.textFields.${1:__ComponentName__}Name;",
			"\t\t${1:__ComponentName__}.${1:__ComponentName__}Description = this.state.textFields.${1:__ComponentName__}Description;",
			"",
			"\t\tif (!this.isFormValid()) {",
			"\t\t\treturn;",
			"\t\t}",
			"",
			"\t\tthis.setState({ isFormSaving: true });",
			"",
			"\t\tif (this.state.isNew${1:__ComponentName__}) {",
			"\t\t\tthis.props.actions",
			"\t\t\t\t.add${1:__ComponentName__}(${1:__ComponentName__})",
			"\t\t\t\t.then((res: any) => {",
			"\t\t\t\t\tthis.redirectTo${1:__ComponentName__}sComponent();",
			"\t\t\t\t})",
			"\t\t\t\t.catch((error: string) => {",
			"\t\t\t\t\tthis.catchError(error);",
			"\t\t\t\t});",
			"\t\t} else {",
			"\t\t\tthis.props.actions",
			"\t\t\t\t.update${1:__ComponentName__}(${1:__ComponentName__})",
			"\t\t\t\t.then(() => {",
			"\t\t\t\t\tthis.redirectTo${1:__ComponentName__}sComponent();",
			"\t\t\t\t})",
			"\t\t\t\t.catch((error: string) => {",
			"\t\t\t\t\tthis.catchError(error);",
			"\t\t\t\t});",
			"\t\t}",
			"\t};",
			"",
			"\tpublic redirectTo${1:__ComponentName__}sComponent() {",
			"\t\tthis.setState({ isFormSaving: false });",
			"\t\tthis.props.history.push('/Sample/${1:__ComponentName__}s');",
			"\t}",
			"",
			"\tpublic catchError(error: string) {",
			"\t\tthis.setState({ isFormSaving: false });",
			"\t}",
			"",
			"\tpublic isFormValid() {",
			"\t\tconst textFields = this.state.textFields;",
			"\t\tconst textFieldsErrors = this.state.textFieldsErrors;",
			"\t\tconst errorMessages = Object.keys(textFieldsErrors).filter(",
			"\t\t\t(k) => textFieldsErrors[k]",
			"\t\t);",
			"",
			"\t\tif (!textFields.${1:__ComponentName__}Name) {",
			"\t\t\treturn false;",
			"\t\t}",
			"",
			"\t\tif (errorMessages.length) {",
			"\t\t\treturn false;",
			"\t\t}",
			"",
			"\t\treturn true;",
			"\t}",
			"}",
			"",
			"function get${1:__ComponentName__}ById(${1:__ComponentName__}s: ${1:__ComponentName__}Model[], ${1:__ComponentName__}Id: string) {",
			"\tconst ${1:__ComponentName__} = ${1:__ComponentName__}s.filter(",
			"\t\t(s: ${1:__ComponentName__}Model) => s.id === ${1:__ComponentName__}Id",
			"\t);",
			"\tif (${1:__ComponentName__}) {",
			"\t\treturn ${1:__ComponentName__}[0];",
			"\t}",
			"\treturn new ${1:__ComponentName__}Model();",
			"}",
			"",
			"function mapStateToProps(",
			"\tstoreState: StoreStateType,",
			"\townProps: OwnProps",
			"): StateToPropsType {",
			"\tconst ${1:__ComponentName__}Id = ownProps.match.params.${1:__ComponentName__}Id;",
			"\tlet current${1:__ComponentName__} = new ${1:__ComponentName__}Model();",
			"\tlet isNew${1:__ComponentName__} = ${1:__ComponentName__}Id === undefined;",
			"",
			"\tif (${1:__ComponentName__}Id && storeState.${1:__ComponentName__}Module.${1:__ComponentName__}Array.length > 0) {",
			"\t\tcurrent${1:__ComponentName__} = get${1:__ComponentName__}ById(",
			"\t\t\tstoreState.${1:__ComponentName__}Module.${1:__ComponentName__}Array,",
			"\t\t\t${1:__ComponentName__}Id",
			"\t\t);",
			"\t\tisNew${1:__ComponentName__} = false;",
			"\t}",
			"",
			"\treturn {",
			"\t\t${1:__ComponentName__}Array: storeState.${1:__ComponentName__}Module.${1:__ComponentName__}Array,",
			"\t\tcurrent${1:__ComponentName__},",
			"\t\tisNew${1:__ComponentName__}",
			"\t};",
			"}",
			"",
			"function mapDispatchToProps(",
			"\tdispatch: Dispatch<I${1:__ComponentName__}Action>",
			"): DispatchToPropsType {",
			"\treturn {",
			"\t\tactions: bindActionCreators(${1:__ComponentName__}Actions, dispatch)",
			"\t};",
			"}",
			"",
			"interface ThisStateType {",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"\tcurrent${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"\terrors: string[];",
			"\tisNew${1:__ComponentName__}: boolean;",
			"\tisFormSaving: boolean;",
			"\ttextFields: {",
			"\t\tid: string;",
			"\t\t${1:__ComponentName__}Name: string;",
			"\t\t${1:__ComponentName__}Description: string;",
			"\t};",
			"\ttextFieldsErrors: {};",
			"}",
			"",
			"interface StateToPropsType {",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"\tcurrent${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"\terrors?: object;",
			"\tisNew${1:__ComponentName__}: boolean;",
			"\tisFormSaving?: boolean;",
			"}",
			"",
			"interface DispatchToPropsType {",
			"\tactions: typeof ${1:__ComponentName__}Actions;",
			"}",
			"",
			"// interface RCProps extends RouteComponentProps<{ ${1:__ComponentName__}Id: string }>;",
			"",
			"interface OwnProps extends RouteComponentProps<{ ${1:__ComponentName__}Id: string }> {}",
			"",
			"interface ThisPropsType",
			"\textends StateToPropsType,",
			"\t\tDispatchToPropsType,",
			"\t\tOwnProps {}",
			"",
			"export default withRouter(",
			"\tconnect<StateToPropsType, DispatchToPropsType, OwnProps>(",
			"\t\tmapStateToProps,",
			"\t\tmapDispatchToProps",
			"\t)(${1:__ComponentName__}Detail)",
			");",
			""
		],
		"description": "Create a ReactJS Component - Details"
	}
}
