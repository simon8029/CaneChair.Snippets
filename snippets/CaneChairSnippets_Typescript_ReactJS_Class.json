{
	"ReactJS : Import : Module": {
		"prefix": "ccReact_Import_Module",
		"body": [
			"import ${2:__moduleName__} from '${1:__modulePath__}';"
		],
		"description": "Import module."
	},
	"ReactJS : Class : Render": {
		"prefix": "ccReact_Class_Render",
		"body": [
			"class ${1:__className__} extends React.Component {",
			"\trender(){",
			"\t\treturn(",
			"\t\t\t${2}",
			"\t\t)",
			"\t}",
			"}",
			"",
			"export default ${1:__className__};",
			""
		],
		"description": "Create a React Class."
	},
	"ReactJS : Class : Constructor": {
		"prefix": "ccReact_Class_Constructor",
		"body": [
			"constructor(props) {",
			"\tsuper(props);",
			"\tthis.state = {",
			"\t\t${1} ",
			"\t}",
			"}"
		],
		"description": "Create a React Class."
	},
	"ReactJS : PureReactJS : Create : Class": {
		"prefix": "ccReact_PureReact_Create_Class",
		"body": [
			"var ${1:__className__} = React.createClass({",
			"\trender: function(){",
			"\t\treturn (",
			"\t\t${2:__statement__}",
			"\t\t);",
			"\t}",
			"});"
		],
		"description": "Create a Pure React Class"
	},
	"ReactJS : PureReactJS : Create : Element": {
		"prefix": "ccReact_PureReact_Create_Element",
		"body": [
			"React.createElement(\"${1:__elementType__}\",${2:__elementProperties__},${3:__elementChildren__})"
		],
		"description": "Create a Pure React Element"
	},
	"ReactJS : PureReactJS : FunctionalComponent": {
		"prefix": "ccReact_PureReact_FunctionalComponent",
		"body": [
			"const ${1:__componentName__} = (${2:__params__}) => React.createElement(\"${3:__elementType__}\",${4:__elementProperties__},${5:__elementChildren__})"
		],
		"description": "Create a Pure React Functional Component"
	},
	"ReactJS : ReactDom : Render": {
		"prefix": "ccReact_ReactDom_Render",
		"body": [
			"ReactDOM.render(${1:__componentName__}, document.getElementById('${2:__id__}'));"
		],
		"description": "Create ReactDOM.render() method."
	},
	"ReactJS : Route : AddRoute": {
		"prefix": "ccReact_Route_AddRoute",
		"body": [
			"<Route path=\"${1:__path__}\" component={${2:__componentName__} />"
		],
		"description": "Create a Route."
	},
	"ReactJS : Function : ArrowFunction": {
		"prefix": "ccReactJS_Function_ArrowFunction",
		"body": [
			"${1:__functionName__} = (${2:__params__}) => {",
			"\t${3}",
			"}"
		],
		"description": "Create a JSX arrow function."
	},
	"ReactJS : Function : PropTypes": {
		"prefix": "ccReactJS_Function_PropTypes",
		"body": [
			"propTypes: {",
			"\t${0}",
			"}"
		],
		"description": "Create propTypes."
	},
	"ReactJS : Function : ComponentWillReceiveProps": {
		"prefix": "ccReactJS_Function_ComponentWillReceiveProps",
		"body": [
			"componentWillReceiveProps(update) {",
			"\tthis.setState({",
			"\t\t${0}",
			"\t})",
			"}"
		],
		"description": "Create componentWillReceiveProps method."
	},
	"ReactJS : Function : SetState": {
		"prefix": "ccReactJS_Function_SetState",
		"body": [
			"this.setState({ ${1} });"
		],
		"description": "Create this.SetState() method."
	},
	"ReactJS : Method": {
		"prefix": "ccReactJS_Class_Method",
		"body": [
			"function ${1:__functionName__}(){",
			"\t${2:__statement__}",
			"}"
		],
		"description": "Create a ReactJS method"
	},
	"ReactJS : Component : Container": {
		"prefix": "ccReactJS_Component_Container",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"import { connect } from 'react-redux';",
			"import { bindActionCreators } from 'redux';",
			"import * as ${1:__componentName__}Actions from '../actions/${1:__componentName__}Actions';",
			"class ${1:__componentName__} extends React.Component {",
			"\tconstructor(props, context) {",
			"\t\tsuper(props, context);",
			"\t\tthis.state = props.state;",
			"\t\tthis.actions = props.actions;",
			"\t}",
			"",
			"\trender() {",
			"\t\treturn (",
			"\t\t<div>",
			"\t\t\t\"${1:__componentName__}\" is working!",
			"\t\t</div>",
			"\t\t);",
			"\t}",
			"}",
			"${1:__componentName__}.propTypes={",
			"\tactions: PropTypes.object.isRequired",
			"};",
			"",
			"function mapStateToProps(store,ownProps){",
			"\treturn{",
			"\t\tstate:store",
			"\t};",
			"}",
			"",
			"function mapDispatchToProps(dispatch){",
			"\treturn {",
			"\t\tactions:bindActionCreators(${1:__componentName__}Actions, dispatch)",
			"\t};",
			"}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:__componentName__});"
		],
		"description": "Create a ReactJS container component"
	},
	"ReactJS : Component : Presentational": {
		"prefix": "ccReactJS_Component_Presentational",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"",
			"const ${1:__ComponentName__} = ({components}) => {",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t${0}",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"${1:__ComponentName__}.propTypes = {",
			"\t// components: PropTypes.array.isRequired",
			"};",
			"",
			"export default ${1:__ComponentName__};"
		],
		"description": "Create a ReactJS Presentational Component"
	},
	"ReactJS : Component : Functional": {
		"prefix": "ccReactJS_Component_Functional",
		"body": [
			"import React from 'react';",
			"",
			"export default function ${1:__componentName__}(${2:__destructureProps__}) {",
			"\treturn (",
			"\t\t${3:__statement__}",
			"\t);",
			"}"
		],
		"description": "Create a ReactJS Functional Component"
	},
	"ReactJS : Reducer : NewReducer": {
		"prefix": "ccReactJS_Reducer_NewReducer",
		"body": [
			"const initialState = {}",
			"export default function ${1:__reducerName__}(state = initialState, action) {",
			"\tswitch (action.type) {",
			"\t\tcase ${2:__actionType__}:",
			"\t\t\tconst { ${3:__variables__} } = action;",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}"
		],
		"description": "Create a ReactJS Reducer."
	},
	"ReactJS : Action : Interface": {
		"prefix": "ccReactJS_Action_Interface",
		"body": [
			"import * as ActionTypes from 'types/actionTypes';\r",
			"import { ${1:__ComponentName__}Model } from 'types/modelTypes/${1:__ComponentName__}Model';\r",
			"\r",
			"export interface IGetAll${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}GetAllSuccess;\r",
			"  ${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];\r",
			"}\r",
			"\r",
			"export interface IGet${1:__ComponentName__}ByIdSuccess {\r",
			"  type: ActionTypes.${1:__ComponentName__}GetByIdSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export interface IAddNew${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}AddSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export interface IUpdate${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}UpdateSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export interface IDelete${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}DeleteSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export type I${1:__ComponentName__}Action =\r",
			"  IGetAll${1:__ComponentName__}Success |\r",
			"  IGet${1:__ComponentName__}ByIdSuccess |\r",
			"  IAddNew${1:__ComponentName__}Success |\r",
			"  IUpdate${1:__ComponentName__}Success |\r",
			"  IDelete${1:__ComponentName__}Success;\r",
			"\r",
			"export default I${1:__ComponentName__}Action;\r",
			""
		],
		"description": "Create an action interface"
	},
	"ReactJS : Action : NewAction": {
		"prefix": "ccReactJS_Action_NewAction",
		"body": [
			"import * as ${1:__ComponentName__}ActionTypes from 'types/actionTypes/${1:__ComponentName__}ActionTypes';\r",
			"import { ${1:__ComponentName__}Model } from 'types/modelTypes/${1:__ComponentName__}Model';\r",
			"import { IGetAll${1:__ComponentName__}Success, IAddNew${1:__ComponentName__}Success, IUpdate${1:__ComponentName__}Success, I${1:__ComponentName__}Action, IDelete${1:__ComponentName__}Success } from 'actions/interfaces/I${1:__ComponentName__}Action';\r",
			"import { beginAjaxCall } from './CommonActions';\r",
			"import { Dispatch } from 'react-redux';\r",
			"import ${1:__ComponentName__}Service from 'services/${1:__ComponentName__}Service';\r",
			"import { ajaxCallError } from './index';\r",
			"\r",
			"export function getAll${1:__ComponentName__}Success(${1:__ComponentName__}Array: ${1:__ComponentName__}Model[]): IGetAll${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}GetAllSuccess,\r",
			"    ${1:__ComponentName__}Array: ${1:__ComponentName__}Array\r",
			"  };\r",
			"}\r",
			"\r",
			"export function addNew${1:__ComponentName__}Success(${1:__ComponentName__}: ${1:__ComponentName__}Model): IAddNew${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}AddSuccess,\r",
			"    ${1:__ComponentName__}: ${1:__ComponentName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"export function update${1:__ComponentName__}Success(${1:__ComponentName__}: ${1:__ComponentName__}Model): IUpdate${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}UpdateSuccess,\r",
			"    ${1:__ComponentName__}: ${1:__ComponentName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"export function delete${1:__ComponentName__}Success(${1:__ComponentName__}: ${1:__ComponentName__}Model): IDelete${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}DeleteSuccess,\r",
			"    ${1:__ComponentName__}: ${1:__ComponentName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"export function getAll${1:__ComponentName__}s() {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.getAll${1:__ComponentName__}s()\r",
			"      .then((res: ${1:__ComponentName__}Model[]) => {\r",
			"        dispatch(getAll${1:__ComponentName__}Success(res));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			"\r",
			"export function addNew${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.addNew${1:__ComponentName__}(${1:__ComponentName__})\r",
			"      .then((s: ${1:__ComponentName__}Model) => {\r",
			"        dispatch(addNew${1:__ComponentName__}Success(s));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			"\r",
			"export function update${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.update${1:__ComponentName__}(${1:__ComponentName__})\r",
			"      .then((res: ${1:__ComponentName__}Model) => {\r",
			"        dispatch(update${1:__ComponentName__}Success(res));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			"\r",
			"export function delete${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.delete${1:__ComponentName__}(${1:__ComponentName__})\r",
			"      .then(() => {\r",
			"        dispatch(delete${1:__ComponentName__}Success(${1:__ComponentName__}));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			""
		],
		"description": "Create a new Action."
	},
	"ReactJS : Type : ActionType": {
		"prefix": "ccReactJS_Type_ActionType",
		"body": [
			"export const ${1:__ComponentName__}GetAllSuccess = '${1:__ComponentName__}GetAllSuccess';\r",
			"export const ${1:__ComponentName__}GetByIdSuccess = '${1:__ComponentName__}GetByIdSuccess';\r",
			"export const ${1:__ComponentName__}AddSuccess = '${1:__ComponentName__}AddSuccess';\r",
			"export const ${1:__ComponentName__}UpdateSuccess = '${1:__ComponentName__}UpdateSuccess';\r",
			"export const ${1:__ComponentName__}DeleteSuccess = '${1:__ComponentName__}DeleteSuccess';\r",
			"\r",
			"export type ${1:__ComponentName__}GetAllSuccess = typeof ${1:__ComponentName__}GetAllSuccess;\r",
			"export type ${1:__ComponentName__}GetByIdSuccess = typeof ${1:__ComponentName__}GetByIdSuccess;\r",
			"export type ${1:__ComponentName__}AddSuccess = typeof ${1:__ComponentName__}AddSuccess;\r",
			"export type ${1:__ComponentName__}UpdateSuccess = typeof ${1:__ComponentName__}UpdateSuccess;\r",
			"export type ${1:__ComponentName__}DeleteSuccess = typeof ${1:__ComponentName__}DeleteSuccess;\r",
			""
		],
		"description": "Create default action types (TypeScript)"
	},
	"ReactJS : Service : NewService": {
		"prefix": "ccReactJS_Service_NewService",
		"body": [
			"import delay from './delay'; // For testing async call. Set to 0 on prod.\r",
			"import { BaseUrl } from '../app.settings';\r",
			"import axios, { AxiosResponse } from 'axios';\r",
			"import { ${1:__ComponentName__}Model } from '../types/modelTypes/${1:__ComponentName__}Model';\r",
			"\r",
			"let httpRequest = axios.create({\r",
			"  baseURL: BaseUrl,\r",
			"  timeout: 1000\r",
			"});\r",
			"\r",
			"class ${1:__ComponentName__}Service {\r",
			"  static ServiceEndPoint = '${1:__ComponentName__}';\r",
			"\r",
			"  static getAll${1:__ComponentName__}() {\r",
			"    return new Promise<${1:__ComponentName__}Model[]>(\r",
			"      (resolve, reject) => {\r",
			"        setTimeout(() => {\r",
			"          httpRequest.get(this.ServiceEndPoint).then((res: AxiosResponse) => resolve(res.data));\r",
			"        }, delay);\r",
			"      });\r",
			"  }\r",
			"\r",
			"  static addNew${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {\r",
			"    ${1:__ComponentName__} = Object.assign({}, ${1:__ComponentName__}); // To avoid manipulating object passed in\r",
			"    let result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {\r",
			"      setTimeout(() => {\r",
			"        httpRequest.post(this.ServiceEndPoint, ${1:__ComponentName__}).then((res: AxiosResponse) => {\r",
			"          return resolve(res.data);\r",
			"        });\r",
			"      }, delay);\r",
			"    });\r",
			"    return result;\r",
			"  }\r",
			"\r",
			"  static update${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {\r",
			"    const ${1:__ComponentName__}EndPoint = `${this.ServiceEndPoint}/${${1:__ComponentName__}.Id}`;\r",
			"    ${1:__ComponentName__} = Object.assign({}, ${1:__ComponentName__}); // To avoid manipulating object passed in\r",
			"    let result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {\r",
			"      setTimeout(() => {\r",
			"        httpRequest.put(${1:__ComponentName__}EndPoint, ${1:__ComponentName__}).then((res: AxiosResponse) => {\r",
			"          return resolve(res.data);\r",
			"        });\r",
			"      }, delay);\r",
			"    });\r",
			"    return result;\r",
			"  }\r",
			"\r",
			"  static delete${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {\r",
			"    const ${1:__ComponentName__}EndPoint = `${this.ServiceEndPoint}/${${1:__ComponentName__}.Id}`;\r",
			"    let result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {\r",
			"      setTimeout(() => {\r",
			"        httpRequest.delete(${1:__ComponentName__}EndPoint).then((res: AxiosResponse) => {\r",
			"          return resolve(res.data);\r",
			"        });\r",
			"      }, delay);\r",
			"    });\r",
			"    return result;\r",
			"  }\r",
			"}\r",
			"\r",
			"export default ${1:__ComponentName__}Service;\r",
			""
		],
		"description": "Create a new ReactJS Service (TypeScript)"
	}
}