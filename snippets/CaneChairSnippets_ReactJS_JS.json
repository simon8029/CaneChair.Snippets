{
  "ReactJS : Duck : NewDuck": {
    "prefix": "ccReactJS_Duck_NewDuck",
    "body": [
      "export const types = {};",
      "",
      "const DEFAULT_STATE = {};",
      "",
      "export function reducer(state = DEFAULT_STATE, action) {",
      "\\tswitch (action.type) {",
      "\\t\\tdefault:",
      "\\t\\t\\treturn state;",
      "\\t}",
      "}",
      "",
      "export const actions = {};",
      ""
    ],
    "description": "Init a Duck file."
  },
  "ReactJS : JS : Component : Class": {
    "prefix": "ccReactJS_JS_Component_Class",
    "body": [
      "import React from 'react';",
      "",
      "class ${1:__ComponentName__} extends React.Component {",
      "\trender() {",
      "\t\treturn <div>Dashboard Works</div>;",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default ${1:__ComponentName__};"
    ],
    "description": "Create React Container Component."
  },
  "ReactJS : JS : Action : NewAction": {
    "prefix": "ccReactJS_JS_Action_NewAction",
    "body": [
      "export const ${1:__ActionType__} = '${1:__ActionType__}';",
      "function ${2:__ActionName__}(${3:__Payload__}) {",
      "\treturn { type: ${1:__ActionType__}, payload: { ${3:__Payload__} } };",
      "}",
      ""
    ],
    "description": "Create a New Action."
  },
  "ReactJS : JS : RootIndexFile": {
    "prefix": "ccReactJS_JS_RootIndexFile",
    "body": [
      "import registerServiceWorker from './registerServiceWorker';",
      "",
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "import { Provider } from 'react-redux';",
      "import store from './store';",
      "import App from './App';",
      "",
      "ReactDOM.render(",
      "\t<Provider>",
      "\t\t<App />",
      "\t</Provider>,",
      "\tdocument.getElementById('root')",
      ");",
      "",
      "// if (module.hot) {",
      "// \tmodule.hot.accept('./App', () => {",
      "// \t\tconst NextApp = require('./App').default;",
      "// \t\tReactDOM.render(",
      "// \t\t\t<Provider store={store}>",
      "// \t\t\t\t<NextApp />",
      "// \t\t\t</Provider>,",
      "// \t\t\tdocument.getElementById('root')",
      "// \t\t);",
      "// \t});",
      "// ",
      "// \tmodule.hot.accept('./reducers', () => {",
      "// \t\tconst nextRootReducer = require('./reducers').default;",
      "// \t\tstore.replaceReducer(nextRootReducer);",
      "// \t});",
      "// }",
      "",
      "registerServiceWorker();"
    ],
    "description": "Create the root index."
  },
  "ReactJS : JS : Store": {
    "prefix": "ccReactJS_JS_Store",
    "body": [
      "import { createStore, applyMiddleware } from 'redux';",
      "import thunk from 'redux-thunk';",
      "import { composeWithDevTools } from 'redux-devtools-extension';",
      "import rootReducer from './rootReducer';",
      "",
      "const store = createStore(",
      "\trootReducer,",
      "\tcomposeWithDevTools(applyMiddleware(thunk))",
      ");",
      "",
      "export default store;",
      ""
    ],
    "description": "Create the store."
  },
  "ReactJS : JS : RootReducer": {
    "prefix": "ccReactJS_JS_RootReducer",
    "body": [
      "import { combineReducers } from 'redux';",
      "import { routerReducer } from 'react-router-redux';",
      "import { ${1:__ReducerName__}Reducer } from './${1:__ReducerName__}Reducer';",
      "",
      "const rootReducer = combineReducers({",
      "\trouterReducer,",
      "\t${1:__ReducerName__}Array: ${1:__ReducerName__}Reducer",
      "});",
      "",
      "export default rootReducer;",
      ""
    ],
    "description": "Create root reducer"
  },
  "ReactJS : JS : NewReducer": {
    "prefix": "ccReactJS_JS_NewReducer",
    "body": [
      "import * as {1:__ReducerName__}ActionTypes from './actionTypes/{1:__ReducerName__}ActionTypes';",
      "const initialState = {",
      "\t${1:__ReducerName__}Array: [],",
      "\tisLoading: false,",
      "\terror: null,",
      "\tsearchTerm: ''",
      "};",
      "",
      "export default function ${1:__ReducerName__}(state = initialState, action) {",
      "\tswitch (action.type) {",
      "\t\tcase 'FETCH_ALL_${2:__ReducerNameInCapital__}_STARTED': {",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\tisLoading: true",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tcase 'FETCH_ALL_${2:__ReducerNameInCapital__}_SUCCEEDED': {",
      "\t\t\tconst { payload } = action;",
      "",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${1:__ReducerName__}Array: payload.${1:__ReducerName__}Array,",
      "\t\t\t\tisLoading: false",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tcase 'FETCH_ALL_${2:__ReducerNameInCapital__}_FAILED': {",
      "\t\t\tconst { payload } = action;",
      "",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\tisLoading: false,",
      "\t\t\t\terror: payload.error",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tcase 'CREATE_${2:__ReducerNameInCapital__}_SUCCEEDED': {",
      "\t\t\tconst { payload } = action;",
      "",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${1:__ReducerName__}Array: state.${1:__ReducerName__}Array.concat(payload.${1:__ReducerName__})",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tcase 'EDIT_${2:__ReducerNameInCapital__}_SUCCEEDED': {",
      "\t\t\tconst { payload } = action;",
      "",
      "\t\t\tconst new_${1:__ReducerName__}Array = state.${1:__ReducerName__}Array.map(${1:__ReducerName__} => {",
      "\t\t\t\tif (${1:__ReducerName__}.id === payload.${1:__ReducerName__}.id) {",
      "\t\t\t\t\treturn payload.${1:__ReducerName__};",
      "\t\t\t\t}",
      "",
      "\t\t\t\treturn ${1:__ReducerName__};",
      "\t\t\t});",
      "",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${1:__ReducerName__}Array: new_${1:__ReducerName__}Array",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tcase 'FILTER_${2:__ReducerNameInCapital__}_ARRAY': {",
      "\t\t\tconst { payload } = action;",
      "",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\tsearchTerm: payload.searchTerm",
      "\t\t\t};",
      "\t\t}",
      "",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "}",
      ""
    ],
    "description": "Create a new reducer."
  },
  "ReactJS : JS : ActionTypes": {
    "prefix": "ccReactJS_JS_ActionTypes",
    "body": [
      "export const GetAll${1:__ActionName__}Start = 'GetAll${1:__ActionName__}Start';",
      "export const GetAll${1:__ActionName__}Success = 'GetAll${1:__ActionName__}Success';",
      "export const GetAll${1:__ActionName__}Failed = 'GetAll${1:__ActionName__}Failed';",
      "export const Get${1:__ActionName__}ByIdSuccess = 'Get${1:__ActionName__}ByIdSuccess';",
      "export const Get${1:__ActionName__}ByIdFailed = 'Get${1:__ActionName__}ByIdFailed';",
      "export const Add${1:__ActionName__}Start = 'Add${1:__ActionName__}Start';",
      "export const Add${1:__ActionName__}Success = 'Add${1:__ActionName__}Success';",
      "export const Add${1:__ActionName__}Failed = 'Add${1:__ActionName__}Failed';",
      "export const Update${1:__ActionName__}Start = 'Update${1:__ActionName__}Start';",
      "export const Update${1:__ActionName__}Success = 'Update${1:__ActionName__}Success';",
      "export const Update${1:__ActionName__}Failed = 'Update${1:__ActionName__}Failed';",
      "export const Delete${1:__ActionName__}Start = 'Delete${1:__ActionName__}Start';",
      "export const Delete${1:__ActionName__}Success = 'Delete${1:__ActionName__}Success';",
      "export const Delete${1:__ActionName__}Failed = 'Delete${1:__ActionName__}Failed';",
      "export const Filter${1:__ActionName__} = 'Filter${1:__ActionName__}';",
      ""
    ],
    "description": "Create Action Types."
  }
}
