{
	"NodeJs : Common : PrintToConsole": {
		"prefix": "cclog",
		"body": [
			"console.log('$1');"
		],
		"description": "Log output to console"
	},
	"NodeJs : Common : IfStatement": {
		"prefix": "ccif",
		"body": [
			"if (${1:__condition__}) {",
			"${2:__statement__}",
			"}"
		],
		"description": "example: if(condition) { statement }"
	},
	"NodeJs : Common : ForEntityInModel": {
		"prefix": "ccForEntityInModel",
		"body": [
			"for (let ${1:__entityname__} in ${2:__modelName__}) {",
			"${3:__statement__}",
			"}"
		],
		"description": "example: if(condition) { statement }"
	},
	"NodeJs : Common : AnonymousFunction": {
		"prefix": "ccAnonymousFunction",
		"body": [
			"(${1:__parameter__})=>{",
			"\t${2:__statement__}",
			"}"
		],
		"description": "example: (parameter)=>{ statement}"
	},
	"NodeJs : Common : StandardRequire": {
		"prefix": "ccStandardRequire",
		"body": [
			"${2:__moduleName__}=require('${1:__modulePath__}');"
		],
		"description": ""
	},
	"NodeJs : Common : StandardFunction": {
		"prefix": "ccStandardFunction",
		"body": [
			"function(${1:__parameter__}){",
			"\t${2:__statement__}",
			"};"
		],
		"description": ""
	},
	"Mongoose : AddNewSchema": {
		"prefix": "ccNewSchema-mongoose",
		"body": [
			"${1:__schemaName__} = new Schema({",
			"\t${2:__statement__}",
			"});"
		],
		"description": ""
	},
	"Mongoose : AddNewProperty": {
		"prefix": "ccprop-mongoose",
		"body": [
			"${1:__propertyname__}: {",
			"\ttype: ${2:__dataType__},",
			"\tdefault: ${3:__defaultValue__}",
			"}"
		],
		"description": ""
	},
	"Express : Controller : ExportsFunction": {
		"prefix": "ccExpress_Controller_Function_Exports",
		"body": [
			"exports.${1:__functionName__} = function(${2:req}, ${3:res}, ${4:}){",
			"\t${5:__statement__}",
			"};"
		],
		"description": ""
	},
	"Express : Controller : Function : GetErrorMessage": {
		"prefix": "ccExpress_Controller_Function_GetErrorMessage",
		"body": [
			"function getErrorMessage(err) {",
			"\tif (err.errors) {",
			"\tfor (let errName in err.errors) {",
			"\t\tif (err.errors[errName].message) {",
			"\t\t\treturn err.errors[errName].message;",
			"\t\t} else {",
			"\t\t\treturn 'Unknow server error';",
			"\t\t}",
			"\t}",
			"\t}",
			"}"
		],
		"description": ""
	},
	"Express : Controller : Function : SimpleCreate": {
		"prefix": "ccExpress_Controller_Function_SimpleCreate",
		"body": [
			"exports.simpleCreate = function (req, res) {",
			"\tconst ${1:entityName} = new ${2:modelName}(req.body);",
			"",
			"\t${1:entityName}.save((err) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({",
			"\t\t\t\tmessage: getErrorMessage(err)",
			"\t\t\t});",
			"\t\t} else {",
			"\t\t\tres.status(200).json(${1:entityName});",
			"\t\t}",
			"\t})",
			"};"
		],
		"description": ""
	},
	"Express : Controller : Function : SimpleGetAll": {
		"prefix": "ccExpress_Controller_Function_SimpleGetAll",
		"body": [
			"exports.getAll = function (req, res) {",
			"\t${1:__modelName__}.find()",
			"\t.exec((err, ${2:__entities__}) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({",
			"\t\t\tmessage: getErrorMessage(err)",
			"\t\t\t});",
			"\t\t} else {",
			"\t\t\tres.status(200).json(${2:__entities__});",
			"\t\t};",
			"\t});",
			"};"
		],
		"description": ""
	},
	"Express : Controller : Function :  SimpleUpdate": {
		"prefix": "ccExpress_Controller_Function_SimpleUpdate",
		"body": [
			"exports.simpleUpdate = function (req, res) {",
			"\tconst ${1:__entity__} = req.${1:__entity__};",
			"",
			"\t${1:__entity__}.${2:__entityProperty__} = req.body.${2:__entityProperty__};",
			"\t${1:__entity__}.save((err) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({",
			"\t\t\t\tmessage: getErrorMessage(err)",
			"\t\t\t});",
			"\t\t} else {",
			"\t\t\tres.status(200).json(${1:__entity__});",
			"\t\t}",
			"\t});",
			"};"
		],
		"description": "Assumption already obtained the object with getById middleware."
	},
	"Express : Middleware : simpleGetById": {
		"prefix": "ccExpress_MiddleWare_SimpleGetById",
		"body": [
			"exports.getById_middleWare = function (req, res, next, id) {",
			"\t${1:__modelName__}.findById(id)",
			"\t\t.exec((err, ${2:__entity__}) => {",
			"\t\t\tif (err) {",
			"\t\t\t\treturn next(err);",
			"\t\t\t}",
			"",
			"\t\t\tif (!${2:__entity__}) {",
			"\t\t\t\treturn next(new Error('Failed to get ${2:__entity__} ' + id));",
			"\t\t\t}",
			"",
			"\t\t\treq.${2:__entity__} = ${2:__entity__};",
			"\t\t\tnext();",
			"\t\t});",
			"};"
		],
		"description": ""
	},
	"Express : middleware : IsAuthenticated": {
		"prefix": "ccExpress_MiddleWare_IsAuthenticated",
		"body": [
			"exports.authenticate_middleware = function (req, res, next) {",
			"\tif (!req.isAuthenticated()) {",
			"\t\treturn res.status(401).send({",
			"\t\t\tmessage: 'Unauthorized.'",
			"\t\t});",
			"\t}",
			"\tnext();",
			"};"
		],
		"description": ""
	},
	"Express : middleware : HasAuthorized": {
		"prefix": "ccExpress_MiddleWare_HasAuthorized",
		"body": [
			"exports.${1:hasAuthorizationFor...} = function (req, res, next) {",
			"\tif (${2:__authorizationCondition__}) {",
			"\t\treturn res.status(403).send({",
			"\t\t\tmessage: 'Unauthorized.'",
			"\t\t});",
			"\t}",
			"\tnext();",
			"}"
		],
		"description": ""
	},
	"Express : Routes : Module :  function": {
		"prefix": "ccExpress_Routes_ModuleExports_Function",
		"body": [
			"module.exports = function (app) {",
			"\t${1:__routes__}",
			"}"
		],
		"description": ""
	},
	"Express : Routes : SimpleAppRoute ": {
		"prefix": "ccExpress_Routes_SimpleAppRoute",
		"body": [
			"app.route('${1:__baseRoute__}')",
			"\t.get(${2:__middleware__}, ${3:__controllerMethod__})",
			"\t.post(${4:__middleware__}, ${5:__controllerMethod__})",
			"\t.put(${6:__middleware__}, ${7:__controllerMethod__})",
			"\t.delete(${8:__middleware__}, ${9:__controllerMethod__});"
		],
		"description": ""
	},
	"Express : Response : Status : 500 : Send ": {
		"prefix": "ccExpress_Return_500_Send",
		"body": [
			"return ${1:res}.status(500).send({ message: '${2:message}' ${3} });"
		],
		"description": ""
	},
	"Express : Return : 200 : Send ": {
		"prefix": "ccExpress_Return_200_Send",
		"body": [
			"return ${1:res}.status(200).send({ ${2} });"
		],
		"description": ""
	},
	"Express : Response : Status : 401 : Send": {
		"prefix": "ccExpress_Return_401_Send",
		"body": [
			"return ${1:res}.status(401).send({ ${2} });"
		],
		"description": ""
	}
}