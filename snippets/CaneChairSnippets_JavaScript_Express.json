{
	"Express:Controller:Exports:Function": {
		"prefix": "ccExpress_Controller_Function_Exports",
		"body": [
			"exports.${1:__functionName__} = function(${2:req}, ${3:res}, ${4:}){",
			"\t${5:__statement__}",
			"};"
		],
		"description": ""
	},
	"Express:Controller:Function :Default": {
		"prefix": "ccExpress_Controller_Function_Default",
		"body": [
			"function ${1:__functionName__}(${2:__parameter__}){",
			"\t${3:__statement__}",
			"}"
		],
		"description": ""
	},
	"Express:Controller:Function:GetErrorMessage": {
		"prefix": "ccExpress_Controller_Function_GetErrorMessage",
		"body": [
			"let getErrorMessage = function (err) {",
			"\tlet message = '';",
			"\tconsole.log(\"err.code: \" + err.code);",
			"\tif (err.code) {",
			"",
			"\t\tswitch (err.code) {",
			"\t\t\tcase 11000:",
			"\t\t\tcase 11001:",
			"\t\t\t\tmessage = '${1:__entityName__} already exists';",
			"\t\t\tbreak;",
			"\t\t\tdefault:",
			"\t\t\t\tmessage = 'Something went wrong';",
			"\t\t\tbreak;",
			"\t\t}",
			"\t} else {",
			"",
			"\t\tfor (var errName in err.errors) {",
			"\t\t\tif (err.errors[errName].message)",
			"\t\t\t\tmessage += err.errors[errName].message;",
			"",
			"\t\t\t}",
			"\t\t}",
			"\treturn message;",
			"};"
		],
		"description": ""
	},
	"Express:Controller:Function:SimpleCreate": {
		"prefix": "ccExpress_Controller_Function_SimpleCreate",
		"body": [
			"exports.create = function (req, res) {",
			"\tconst ${1:entityName} = new ${2:modelName}(req.body);",
			"",
			"\t${1:entityName}.save((err) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({",
			"\t\t\t\tmessage: getErrorMessage(err)",
			"\t\t\t});",
			"\t\t} else {",
			"\t\t\tres.status(200).json(${1:entityName});",
			"\t\t}",
			"\t})",
			"};"
		],
		"description": ""
	},
	"Express:Controller:Function:SimpleGetAll": {
		"prefix": "ccExpress_Controller_Function_SimpleGetAll",
		"body": [
			"exports.getAll = function (req, res) {",
			"\t${1:__modelName__}.find().exec((err, ${2:__entities__}) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({",
			"\t\t\tmessage: getErrorMessage(err)",
			"\t\t\t});",
			"\t\t} else {",
			"\t\t\tres.status(200).json(${2:__entities__});",
			"\t\t};",
			"\t});",
			"};"
		],
		"description": ""
	},
	"Express:Controller:Get": {
		"prefix": "ccExpress_Controller_Get",
		"body": [
			"// Get '${1:__ControllerName__}' page",
			"const ${1:__ControllerName__} = (req, res) => {",
			"\tres.render('index', { title: '${1:__ControllerName__}' });",
			"};"
		],
		"description": "Create Get Page Controller."
	},
	"Express:Controller:Function: SimpleUpdate": {
		"prefix": "ccExpress_Controller_Function_SimpleUpdate",
		"body": [
			"exports.update = function (req, res) {",
			"\tconst ${1:__entity__} = req.${1:__entity__};",
			"",
			"\t${1:__entity__}.${2:__entityProperty__} = req.body.${2:__entityProperty__};",
			"\t${1:__entity__}.save((err) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({",
			"\t\t\t\tmessage: getErrorMessage(err)",
			"\t\t\t});",
			"\t\t} else {",
			"\t\t\tres.status(200).json(${1:__entity__});",
			"\t\t}",
			"\t});",
			"};"
		],
		"description": "Assumption already obtained the object with getById middleware."
	},
	"Express:Controller:Function: SimpleDelete": {
		"prefix": "ccExpress_Controller_Function_SimpleDelete",
		"body": [
			"exports.delete = function (req, res) {",
			"\tlet ${1:__entityName__} = req.${1:__entityName__};",
			"\t${1:__entityName__}.remove((err) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(400).send({ message: getErrorMessage(err) });",
			"\t\t} else {",
			"\t\t\tres.status(204).send({ message: ${1:__entityName__} deleted. });",
			"\t\t}",
			"\t})",
			"}"
		],
		"description": ""
	},
	"Express:Middleware:simpleGetById": {
		"prefix": "ccExpress_MiddleWare_SimpleGetById",
		"body": [
			"exports.getById_middleWare = function (req, res, next, id) {",
			"\t${1:__modelName__}.findById(id).exec((err, ${2:__entity__}) => {",
			"\t\tif (err) {",
			"\t\t\treturn next(err);",
			"\t\t}",
			"",
			"\t\tif (!${2:__entity__}) {",
			"\t\t\treturn next(new Error('Failed to get ${2:__entity__} ' + id));",
			"\t\t}",
			"",
			"\t\treq.${2:__entity__} = ${2:__entity__};",
			"\t\tnext();",
			"\t});",
			"};"
		],
		"description": ""
	},
	"Express:middleware:IsAuthenticated": {
		"prefix": "ccExpress_MiddleWare_IsAuthenticated",
		"body": [
			"exports.authenticate_middleware = function (req, res, next) {",
			"\tif (!req.isAuthenticated()) {",
			"\t\treturn res.status(401).send({",
			"\t\t\tmessage: 'Unauthorized.'",
			"\t\t});",
			"\t}",
			"\tnext();",
			"};"
		],
		"description": ""
	},
	"Express:middleware:HasAuthorized": {
		"prefix": "ccExpress_MiddleWare_HasAuthorized",
		"body": [
			"exports.${1:hasAuthorizationFor...} = function (req, res, next) {",
			"\tif (${2:__authorizationCondition__}) {",
			"\t\treturn res.status(403).send({",
			"\t\t\tmessage: 'Unauthorized.'",
			"\t\t});",
			"\t}",
			"\tnext();",
			"}"
		],
		"description": ""
	},
	"Express:MiddleWare:VerifyToken": {
		"prefix": "ccExpress_MiddleWare_VerifyToken",
		"body": [
			"var jwt = require('jsonwebtoken');",
			"function verifyToken(req, res, next) {",
			"\tvar token = req.headers['${1}'];",
			"\tif (!token)",
			"\t\treturn res.status(403).send('No token.');",
			"\tjwt.verify(token, config.secret, function (err, decoded) {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(500).send('Invalid token.');",
			"\t\t}",
			"",
			"\t\t${2:req.userId = decoded.id;}",
			"\t\t",
			"\t\tnext();",
			"\t});",
			"}"
		],
		"description": ""
	},
	"Express:Routes:Module:Exports:function": {
		"prefix": "ccExpress_Routes_Module_Exports_Function",
		"body": ["module.exports = {", "\t${1:__routes__}", "}"],
		"description": ""
	},
	"Express:Routes:SimpleAppRoute": {
		"prefix": "ccExpress_Routes_SimpleAppRoute",
		"body": [
			"app.route('${1:__baseRoute__}')",
			"\t.get(${2:__middleware__}, ${3:__controllerFunction__})",
			"\t.post(${4:__middleware__}, ${5:__controllerFunction__})",
			"\t.put(${6:__middleware__}, ${7:__controllerFunction__})",
			"\t.delete(${8:__middleware__}, ${9:__controllerFunction__});"
		],
		"description": ""
	},
	"Express:Routes:Get": {
		"prefix": "ccExpress_Routes_Get",
		"body": ["router.get('${1:__Route__}', {3:__controllerFunction__});"],
		"description": "Create A Get Route"
	},
	"Express:Response:Status:200:Send": {
		"prefix": "ccExpress_Response_Status_200_Send",
		"body": ["${1:res}.status(200).send(${2});"],
		"description": ""
	},
	"Express:Response:Status:401:Send": {
		"prefix": "ccExpress_Response_Status_401_Send",
		"body": ["${1:res}.status(401).send(${2});"],
		"description": ""
	},
	"Express:Response:Status:404:Send": {
		"prefix": "ccExpress_Response_Status_404_Send",
		"body": ["${1:res}.status(404).send('${2:Not found.}');"],
		"description": ""
	},
	"Express:Response:Status:500:Send": {
		"prefix": "ccExpress_Response_Status_500_Send",
		"body": ["${1:res}.status(500).send({ message: '${2:message}' ${3} });"],
		"description": ""
	}
}
