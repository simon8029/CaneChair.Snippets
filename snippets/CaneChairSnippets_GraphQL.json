{
  "GraphQL : Client : Class": {
    "prefix": "cc_graphQL_client_class",
    "body": [
      "import React, { Component } from 'react';\r",
      "import { Query } from 'react-apollo';\r",
      "import query from './query';\r",
      "\r",
      "export default class ${1:__ClassName__} extends Component {\r",
      "  render() {\r",
      "    return (\r",
      "      <div>\r",
      "        <Query query={query}>\r",
      "          {({ data }) => {\r",
      "            console.log(`data:`, data);\r",
      "            return null;\r",
      "          }}\r",
      "        </Query>\r",
      "      </div>\r",
      "    );\r",
      "  }\r",
      "}"
    ],
    "description": "Create a graphQL Client Class"
  },
  "GraphQL : Client : IndexJS": {
    "prefix": "cc_graphQL_client_indexJs",
    "body": [
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "import './index.css';",
      "import App from './App';",
      "import * as serviceWorker from './serviceWorker';",
      "import ApolloClient from 'apollo-boost';",
      "import { ApolloProvider } from 'react-apollo';",
      "",
      "export const client = new ApolloClient({",
      "  uri: 'http://localhost:3000/graphql',",
      "  request: async operation => {",
      "    const token = await localStorage.getItem('token');",
      "    if (token) {",
      "      operation.setContext({",
      "        headers: {",
      "          'x-auth-token': token",
      "        }",
      "      });",
      "    } else {",
      "      operation.setContext();",
      "    }",
      "  }",
      "});",
      "",
      "ReactDOM.render(",
      "  <ApolloProvider client={client}>",
      "    <App />",
      "  </ApolloProvider>",
      ", document.getElementById('root'));",
      "",
      "// If you want your app to work offline and load faster, you can change",
      "// unregister() to register() below. Note this comes with some pitfalls.",
      "// Learn more about service workers: http://bit.ly/CRA-PWA",
      "serviceWorker.unregister();",
      ""
    ],
    "description": "Create graphQL Client index.js file"
  },
  "GraphQL : Server : appJS": {
    "prefix": "cc_graphQL_server_appJs",
    "body": [
      "const express = require('express');",
      "const app = express();",
      "const { ApolloServer } = require('apollo-server-express');",
      "const cors = require('cors');",
      "",
      "const models = require('./models');",
      "const typeDefs = require('./typeDefs');",
      "const resolvers = require('./resolvers');",
      "",
      "const server = new ApolloServer({",
      "  typeDefs,",
      "  resolvers,",
      "  context: {",
      "    models,",
      "  }",
      "});",
      "server.applyMiddleware({ app });",
      "app.use(cors());",
      "",
      "app.listen(3000, () => console.info('Apollo GraphQL server is running on port 3000'));"
    ],
    "description": "Create graphQL server app.js file"
  },
  "GraphQL : Server : TypeDefs : DefaultSchema": {
    "prefix": "cc_graphQL_server_typeDefs_defaultSchema",
    "body": [
      "const { gql } = require('apollo-server-express');",
      "module.exports = gql`",
      "  type Query {",
      "    _: Boolean",
      "  }",
      "",
      "  type Mutation {",
      "    _: Boolean",
      "  }",
      "`;"
    ],
    "description": "Create graphQL server typeDefs default.js file"
  },
  "GraphQL : Server : TypeDefs : indexJs": {
    "prefix": "cc_graphQL_server_typeDefs_indexJs",
    "body": [
      "const ${1:__SchameName__}Schema = require('./${1:__SchameName__}');",
      "",
      "const defaultSchema = require('./default');",
      "",
      "module.exports = [defaultSchema, ${1:__SchameName__}Schema];"
    ],
    "description": "Create graphql server typeDefs index.js file"
  },
  "GraphQL : Server : TypeDefs : Schema": {
    "prefix": "cc_graphQL_server_typeDefs_schema",
    "body": [
      "const { gql } = require('apollo-server-express');",
      "module.exports = gql`",
      "  extend type Query {",
      "    ${2:__FieldName__}s: [${1:__ModelName__}]",
      "    ${2:__FieldName__}(id: Int!): ${1:__ModelName__}",
      "  }",
      "",
      "  extend type Mutation {",
      "    create${1:__ModelName__}(${3:__PropertyName__}: String!): ${1:__ModelName__}!",
      "    remove${1:__ModelName__}(id: Int!): Boolean",
      "  }",
      "",
      "  type ${1:__ModelName__} {",
      "    id: ID!",
      "    ${3:__PropertyName__}: String!",
      "  }",
      "`;"
    ],
    "description": "Create graphQL server typeDefs schema"
  },
  "GraphQL : Server : Resolvers : indexJs": {
    "prefix": "cc_graphQL_server_resolvers_indexJs",
    "body": [
      "const ${1:__ModelName__}Resolvers = require('./${1:__ModelName__}');",
      "",
      "module.exports = [${1:__ModelName__}Resolvers ];"
    ],
    "description": "Create graphQL server resolvers index.js file"
  },
  "GraphQL : Server : Resolvers": {
    "prefix": "cc_graphQL_server_resolvers",
    "body": [
      "// parent, args, context, info",
      "const resolvers = {",
      "  Query: {",
      "    ${2:__FieldName__}s: (parent, args, { models }) => {",
      "      return models.${1:__ModelName__}.findAll();",
      "    },",
      "    ${2:__FieldName__}: (parent, { id }, { models }) => {",
      "      return models.${1:__ModelName__}.findByPk(id);",
      "    },",
      "    // me: (parent, args, { me }) => me",
      "  },",
      "  Mutation: {",
      "    create${1:__ModelName__}: (parent, { ${3:__PropertyName__} }, { models }) => {",
      "      const ${2:__FieldName__} = {",
      "        ${3:__PropertyName__}",
      "      };",
      "      return models.${1:__ModelName__}.create(${2:__FieldName__});",
      "    },",
      "    remove${1:__ModelName__}: (parent, { id }, { models }) => {",
      "      return models.${1:__ModelName__}.destroy({",
      "        where: {",
      "          id",
      "        }",
      "      });",
      "    }",
      "  },",
      "  ${1:__ModelName__}: {",
      "    ${4:__ChildModelPropertyName__}: (parent, args, { models }) => {",
      "      return models.${5:__ChildModelName__}.findAll({",
      "        where: {",
      "          ${6:__foreignKey__}: parent.id",
      "        }",
      "      })",
      "    }",
      "  }",
      "};",
      "",
      "module.exports = resolvers;"
    ],
    "description": "Create graphQL server resolvers"
  },
  "GraphQL : Server : Model : IndexJS": {
    "prefix": "cc_graphQL_server_model_indexJs",
    "body": [
      "const { sequelize } = require('./database');",
      "",
      "const ${1:__ModelName__}Model = sequelize.import('./${2:__ModelFileName__}');",
      "",
      "const models = {",
      "  ${1:__ModelName__}: ${1:__ModelName__}Model,",
      "};",
      "",
      "Object.keys(models).forEach(key => {",
      "  if ('associate' in models[key]) {",
      "    models[key].associate(models);",
      "  }",
      "});",
      "",
      "module.exports = models;"
    ],
    "description": "Create graphQL server model index.js file"
  },
  "GraphQL : Server : Model": {
    "prefix": "cc_graphQL_server_model",
    "body": [
      "module.exports = (sequelize, DataTypes) => {",
      "  const ${1:__Model#1Name__} = sequelize.define('${1:__Model#1Name__}', {",
      "    make: {",
      "      type: DataTypes.STRING",
      "    },",
      "    model: {",
      "      type: DataTypes.STRING",
      "    },",
      "    colour: {",
      "      type: DataTypes.STRING",
      "    }",
      "  });",
      "",
      "  ${1:__Model#1Name__}.associate = models => {",
      "    ${1:__Model#1Name__}.belongsTo(models.${2:__Model#2Name__});",
      "  };",
      "",
      "  ${3:__Model#3Name__}.associate = models => {",
      "    ${3:__Model#3Name__}.hasMany(models.${1:__Model#1Name__}, { onDelete: 'CASCADE'})",
      "  };",
      "",
      "  return ${1:__Model#1Name__};",
      "}"
    ],
    "description": "Create graphQL server model"
  },
  "GraphQL : Server : Database": {
    "prefix": "cc_graphQL_server_database",
    "body": [
      "const Sequelize = require('sequelize');",
      "const sequelize = new Sequelize('${1:__DatabaseName__}', process.env.DATABASEUSERNAME, process.env.DATABASE, {",
      "  dialect: 'mysql',",
      "  operatorsAliases: false,",
      "  define: {",
      "    timestamps: false",
      "  }",
      "});",
      "",
      "module.exports = {",
      "  sequelize",
      "};"
    ],
    "description": "Create graphQL server database.js file"
  },
  "GraphQL : Server : DummyData": {
    "prefix": "cc_graphQL_server_dummyData",
    "body": [
      "const { sequelize } = require('./models/database');",
      "const models = require('./models');",
      "",
      "const createData = async() => {",
      "  await models.${1:__ModelName__}.create({",
      "    ${2:__PropertyName__}: '${2:__PropertyName__}1',",
      "    ${3:__ChildModelFieldName__}s: [{",
      "      ${4:__ChildModelPropertyName__}: '${4:__ChildModelPropertyName__}1',",
      "    }]",
      "  }, {",
      "    include: [models.${5:__ChildModelName__}]",
      "  });",
      "",
      "  await models.${1:__ModelName__}.create({",
      "    ${2:__PropertyName__}: '${2:__PropertyName__}2',",
      "    ${3:__ChildModelFieldName__}s: [{",
      "      ${4:__ChildModelPropertyName__}: '${4:__ChildModelPropertyName__}2',",
      "    }]",
      "  }, {",
      "    include: [models.${5:__ChildModelName__}]",
      "  });",
      "}",
      "",
      "sequelize.sync({ force: true }).then(async() => {",
      "  try {",
      "    await createData();",
      "    process.exit();",
      "  } catch(error) {",
      "    console.error(error);",
      "  }",
      "});"
    ],
    "description": "Populate dummy data to database"
  }
}
