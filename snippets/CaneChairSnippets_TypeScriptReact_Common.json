{
	"Common : IIFE": {
		"prefix": "ccCommon_IIFE",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = {${1}};",
			"})();"
		],
		"description": "Create an IIFE function."
	},
	"Common : PrintToConsole : Group": {
		"prefix": "cclog_group",
		"body": [
			"console.group(${1:__GroupName__})",
			"console.log(`${2:__output__}:`, ${2:__output__});",
			"console.groupEnd(${1:__GroupName__})"
		],
		"description": "Log output to console"
	},
	"Common : PrintToConsole": {
		"prefix": "cclog",
		"body": ["console.log(`${1:__output__}:`, ${1:__output__});"],
		"description": "Log output to console"
	},
	"Common : Import : Module": {
		"prefix": "ccCommon_Import_Module",
		"body": ["import ${0} from '${1:__modulePath__}';"],
		"description": "Import module."
	},
	"Common : Require": {
		"prefix": "ccCommon_Require",
		"body": ["const ${0} = require('${1:__moduleName__}');"],
		"description": "Require module"
	},
	"Common : Class : Constructor": {
		"prefix": "ccReact_Class_Constructor",
		"body": [
			"constructor(props) {",
			"\tsuper(props);",
			"\tthis.state = {",
			"\t\t${1} ",
			"\t}",
			"}"
		],
		"description": "Create a React Class."
	},
	"Common : Function : If": {
		"prefix": "ccCommon_Function_If",
		"body": ["if (${1:__condition__}) {", "\t${2:__statement__}", "}"],
		"description": "Create a standard If statement."
	},
	"Common : Function : Switch": {
		"prefix": "ccCommon_Function_Switch",
		"body": [
			"switch (${1:__key__}) {",
			"\tcase ${2:__value__}:",
			"\t\t${3:__statement__}",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Create a standard switch statement."
	},
	"ReactJS : Function : ArrowFunction": {
		"prefix": "ccCommon_Function_ArrowFunction",
		"body": ["${1:__functionName__} = (${2:__params__}) => {", "\t${3}", "}"],
		"description": "Create a JSX arrow function."
	},
	"ReactJS : Function : SetState": {
		"prefix": "ccCommon_Function_SetState",
		"body": ["this.setState({ ${1} });"],
		"description": "Create this.SetState() method (TypeScript)"
	},
	"Common : Object : Assign": {
		"prefix": "ccCommon_Object_Assign",
		"body": [
			"Object.assign({}, ${1:__originalObject__}, { ${2:__Properties__} });"
		],
		"description": "Create a Object.assign() statement."
	},
	"Common : Array : Map": {
		"prefix": "ccCommon_Array_Map",
		"body": ["${1:__arrayName__}.map((${2:__params__}) => ", "\t${3}", ")"],
		"description": "Create a Array.map() function."
	},
	"Common : Array : Filter": {
		"prefix": "ccCommon_Array_Filter",
		"body": ["${1:__arrayName__}.filter((${2:__params__}) => ${3} );"],
		"description": "Create a Array.filter() function."
	},
	"Common : Array : Find": {
		"prefix": "ccCommon_Array_Find",
		"body": ["${1:__arrayName__}.find((${2:__params__}) => ${3} );"],
		"description": "Create a Array.find() function."
	},
	"Common : Array : FindIndex": {
		"prefix": "ccCommon_Array_FindIndex",
		"body": ["${1:__arrayName__}.findIndex((${2:__params__}) => ${3});"],
		"description": "Create a Array.findIndex() function."
	},
	"Common : Array : ForEach": {
		"prefix": "ccCommon_Array_ForEach",
		"body": [
			"${1:__arrayName__}.forEach(${2:__element__} => {",
			"\t${3:__statement__}",
			"});"
		],
		"description": "Create a Array.forEach() function."
	},
	"UseState": {
		"prefix": "ccTS_useState",
		"body": [
			"const [${1:__StateName__}, set${1/^(.)(.*)$/${1:/upcase}${2}/}] = useState(${0});"
		]
	},
	"Arrow Function": {
		"prefix": "ccTS_Arrow_Function",
		"body": [
			"\tconst ${1:__FunctionName__}: ${2:__Type__} = (${3:__args__}) => {",
			"\t\t${0}",
			"\t};"
		]
	},
	"Store": {
		"prefix": "ccTS_Store",
		"body": [
			"import { configureStore, Action } from '@reduxjs/toolkit';",
			"import { ThunkAction } from 'redux-thunk';",
			"",
			"import rootReducer, { RootState } from './rootReducer';",
			"",
			"const store = configureStore({",
			"\treducer: rootReducer,",
			"});",
			"",
			"if (process.env.NODE_ENV !== 'production' && module.hot) {",
			"\tmodule.hot.accept('./rootReducer', () => {",
			"\t\tconst newRootReducer = require('./rootReducer').default;",
			"\t\tstore.replaceReducer(newRootReducer);",
			"\t});",
			"}",
			"",
			"export type AppDispatch = typeof store.dispatch;",
			"",
			"export type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;",
			"",
			"export default store;",
			""
		]
	},
	"RootReducer": {
		"prefix": "ccTS_RootReducer",
		"body": [
			"import { combineReducers } from '@reduxjs/toolkit';",
			"",
			"import ${1:__featureName__}Reducer from 'features/${1:__featureName__}/${1:__featureName__}Slice';",
			"",
			"const rootReducer = combineReducers({",
			"\t${1:__featureName__}: ${1:__featureName__}Reducer,",
			"});",
			"",
			"export type RootState = ReturnType<typeof rootReducer>;",
			"",
			"export default rootReducer;",
			""
		]
	},
	"Slice": {
		"prefix": "ccTS_Slice",
		"body": [
			"import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"import { ${1:__SliceName__}, get${1:__SliceName__}s } from './${1:__SliceName__}API';",
			"import { AppThunk } from 'app/store';",
			"",
			"interface ${1:__SliceName__}sState {",
			"\t${1:__SliceName__}s: Record<number, ${1:__SliceName__}[] | undefined>;",
			"\tloading: boolean;",
			"\terror: string | null;",
			"}",
			"",
			"interface ${1:__SliceName__}Loaded {",
			"\t${1:__SliceName__}s: ${1:__SliceName__}[];",
			"}",
			"",
			"const initialState: ${1:__SliceName__}sState = {",
			"\t${1:__SliceName__}s: [],",
			"\tloading: false,",
			"\terror: null,",
			"};",
			"",
			"const ${1:__SliceName__}s = createSlice({",
			"\tname: '${1:__SliceName__}s',",
			"\tinitialState,",
			"\treducers: {",
			"\t\tget${1:__SliceName__}sStart(state) {",
			"\t\t\tstate.loading = true;",
			"\t\t\tstate.error = null;",
			"\t\t},",
			"\t\tget${1:__SliceName__}sSuccess(state, action: PayloadAction<${1:__SliceName__}Loaded>) {",
			"\t\t\tstate.${1:__SliceName__}s = action.payload;",
			"\t\t},",
			"\t\tget${1:__SliceName__}sFailure(state, action: PayloadAction<string>) {",
			"\t\t\tstate.loading = false;",
			"\t\t\tstate.error = action.payload;",
			"\t\t},",
			"\t},",
			"});",
			"",
			"export const {",
			"\tget${1:__SliceName__}sStart,",
			"\tget${1:__SliceName__}sSuccess,",
			"\tget${1:__SliceName__}sFailure,",
			"} = ${1:__SliceName__}s.actions;",
			"",
			"export default ${1:__SliceName__}s.reducer;",
			"",
			"export const fetch${1:__SliceName__}s = (): AppThunk => async (dispatch) => {",
			"\ttry {",
			"\t\tdispatch(get${1:__SliceName__}sStart());",
			"\t\tconst ${1:__SliceName__}s = await get${1:__SliceName__}s(issue.${1:__SliceName__}s_url);",
			"\t\tdispatch(get${1:__SliceName__}sSuccess({ issueId: issue.number, ${1:__SliceName__}s }));",
			"\t} catch (err) {",
			"\t\tdispatch(get${1:__SliceName__}sFailure(err));",
			"\t}",
			"};",
			""
		]
	},
	"component": {
		"prefix": "ccTS_Component",
		"body": [
			"import React from 'react';",
			"",
			"type ${1:__ComponentName__|}Props = {",
			"",
			"};",
			"",
			"export const ${1:__ComponentName__|} = (props: ${1:__ComponentName__|}Props) => {",
			"\tconst {",
			"\t\t",
			"\t} = props;",
			"",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t${1:__ComponentName__|} here.",
			"\t\t</div>",
			"\t);",
			"};",
			""
		]
	},
	"Form": {
		"prefix": "ccTS_Form",
		"body": [
			"<form>",
			"\t\t\t<div>",
			"\t\t\t\t<label htmlFor='input1'>Input:</label>",
			"\t\t\t\t<input name='input1' value={inputValue} onChange={onInputChanged} />",
			"\t\t\t\t<button type='button' onClick={onButtonClicked}>",
			"\t\t\t\t\tButton",
			"\t\t\t\t</button>",
			"\t\t\t</div>",
			"\t\t</form>"
		]
	}
}
