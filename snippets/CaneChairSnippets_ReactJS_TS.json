{
	"ReactJS : TS : Store : NewStore": {
		"prefix": "ccReactJS_TS_Store_NewStore",
		"body": [
			"import rootReducer from 'Reducers/RootReducer';",
			"import { createStore, applyMiddleware } from 'redux';",
			"import Thunk from 'redux-thunk';",
			"import { composeWithDevTools } from 'redux-devtools-extension';",
			"import createHistory from 'history/createBrowserHistory';",
			"// import { routerMiddleware } from 'react-router-redux';",
			"",
			"export const history = createHistory();",
			"",
			"const Store = createStore(",
			"\trootReducer,",
			"\tcomposeWithDevTools(",
			"\t\tapplyMiddleware(",
			"\t\t\tThunk",
			"\t\t\t// routerMiddleware(history)",
			"\t\t)",
			"\t)",
			");",
			"",
			"export default Store;",
			""
		],
		"description": "Create New ReactJS Redux Store"
	},
	"ReactJS : TS : Type : StoreStateType": {
		"prefix": "ccReactJS_TS_Type_StoreStateType",
		"body": [
			"import ${1:__ModelName__}Model from 'types/modelTypes/${1:__ModelName__}Model';\r",
			"",
			"export type StoreState = {",
			"\t${1:__ModelName__}Array: ${1:__ModelName__}Model[];",
			"};",
			"",
			"export default StoreState;",
			""
		],
		"description": "Create New Store State Type (TypeScript)"
	},
	"ReactJS : TS : Type : NewStateType": {
		"prefix": "ccReactJS_TS_Type_NewStateType",
		"body": [
			"import ${1:__ComponentName__}Model from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"",
			"export type ${1:__ComponentName__}StateType = {",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"\tisLoading: boolean;",
			"\terror: Error | null;",
			"\tsearchTerm: string;",
			"};",
			"",
			"export default ${1:__ComponentName__}StateType;",
			""
		],
		"description": "Create a New State Type."
	},
	"ReactJS : TS : Type : NewModelType": {
		"prefix": "ccReactJS_TS_Type_NewModelType",
		"body": [
			"export class ${1:__ComponentName__}Model {",
			"\tid: string;",
			"\t${1:__ComponentName__}Name: string;",
			"\t${1:__ComponentName__}Description: string;",
			"}",
			"",
			"export default ${1:__ComponentName__}Model;",
			""
		],
		"description": "Create default model types (TypeScript)"
	},
	"ReactJS : TS : Type : NewActionType": {
		"prefix": "ccReactJS_TS_Type_NewActionType",
		"body": [
			"export const GetAll${1:__ComponentName__}Start: string = 'GetAll${1:__ComponentName__}Start';",
			"export const GetAll${1:__ComponentName__}Succeeded: string = 'GetAll${1:__ComponentName__}Succeeded';",
			"export const GetAll${1:__ComponentName__}Failed: string = 'GetAll${1:__ComponentName__}Failed';",
			"export const Get${1:__ComponentName__}ByIdStart: string = 'Get${1:__ComponentName__}ByIdStart';",
			"export const Get${1:__ComponentName__}ByIdSucceeded: string = 'Get${1:__ComponentName__}ByIdSucceeded';",
			"export const Get${1:__ComponentName__}ByIdFailed: string = 'Get${1:__ComponentName__}ByIdFailed';",
			"export const Add${1:__ComponentName__}Start: string = 'Add${1:__ComponentName__}Start';",
			"export const Add${1:__ComponentName__}Succeeded: string = 'Add${1:__ComponentName__}Succeeded';",
			"export const Add${1:__ComponentName__}Failed: string = 'Add${1:__ComponentName__}Failed';",
			"export const Update${1:__ComponentName__}Start: string = 'Update${1:__ComponentName__}Start';",
			"export const Update${1:__ComponentName__}Succeeded: string = 'Update${1:__ComponentName__}Succeeded';",
			"export const Update${1:__ComponentName__}Failed: string = 'Update${1:__ComponentName__}Failed';",
			"export const Delete${1:__ComponentName__}Start: string = 'Delete${1:__ComponentName__}Start';",
			"export const Delete${1:__ComponentName__}Succeeded: string = 'Delete${1:__ComponentName__}Succeeded';",
			"export const Delete${1:__ComponentName__}Failed: string = 'Delete${1:__ComponentName__}Failed';",
			"export const Filter${1:__ComponentName__}: string = 'Filter${1:__ComponentName__}';",
			"",
			"export type GetAll${1:__ComponentName__}Start = typeof GetAll${1:__ComponentName__}Start;",
			"export type GetAll${1:__ComponentName__}Succeeded = typeof GetAll${1:__ComponentName__}Succeeded;",
			"export type GetAll${1:__ComponentName__}Failed = typeof GetAll${1:__ComponentName__}Failed;",
			"export type Get${1:__ComponentName__}ByIdStart = typeof Get${1:__ComponentName__}ByIdStart;",
			"export type Get${1:__ComponentName__}ByIdSucceeded = typeof Get${1:__ComponentName__}ByIdSucceeded;",
			"export type Get${1:__ComponentName__}ByIdFailed = typeof Get${1:__ComponentName__}ByIdFailed;",
			"export type Add${1:__ComponentName__}Start = typeof Add${1:__ComponentName__}Start;",
			"export type Add${1:__ComponentName__}Succeeded = typeof Add${1:__ComponentName__}Succeeded;",
			"export type Add${1:__ComponentName__}Failed = typeof Add${1:__ComponentName__}Failed;",
			"export type Update${1:__ComponentName__}Start = typeof Update${1:__ComponentName__}Start;",
			"export type Update${1:__ComponentName__}Succeeded = typeof Update${1:__ComponentName__}Succeeded;",
			"export type Update${1:__ComponentName__}Failed = typeof Update${1:__ComponentName__}Failed;",
			"export type Delete${1:__ComponentName__}Start = typeof Delete${1:__ComponentName__}Start;",
			"export type Delete${1:__ComponentName__}Succeeded = typeof Delete${1:__ComponentName__}Succeeded;",
			"export type Delete${1:__ComponentName__}Failed = typeof Delete${1:__ComponentName__}Failed;",
			"export type Filter${1:__ComponentName__} = typeof Filter${1:__ComponentName__};",
			""
		],
		"description": "Create default action types (TypeScript)"
	},
	"ReactJS : TS : Interface : NewActionInterface": {
		"prefix": "ccReactJS_TS_Interface_NewActionInterface",
		"body": [
			"import * as ActionTypes from 'Types/ActionTypes';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"",
			"export interface IGetAll${1:__ComponentName__}Start {",
			"\ttype: ActionTypes.GetAll${1:__ComponentName__}Start;",
			"}",
			"",
			"export interface IGetAll${1:__ComponentName__}Succeeded {",
			"\ttype: ActionTypes.GetAll${1:__ComponentName__}Succeeded;",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];",
			"}",
			"",
			"export interface IGetAll${1:__ComponentName__}Failed {",
			"\ttype: ActionTypes.GetAll${1:__ComponentName__}Failed;",
			"\terror: Error;",
			"}",
			"",
			"export interface IGet${1:__ComponentName__}ByIdStart {",
			"\ttype: ActionTypes.Get${1:__ComponentName__}ByIdStart;",
			"}",
			"",
			"export interface IGet${1:__ComponentName__}ByIdSucceeded {",
			"\ttype: ActionTypes.Get${1:__ComponentName__}ByIdSucceeded;",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"}",
			"",
			"export interface IGet${1:__ComponentName__}ByIdFailed {",
			"\ttype: ActionTypes.Get${1:__ComponentName__}ByIdFailed;",
			"\terror: Error;",
			"}",
			"",
			"export interface IAdd${1:__ComponentName__}Start {",
			"\ttype: ActionTypes.Add${1:__ComponentName__}Start;",
			"}",
			"",
			"export interface IAdd${1:__ComponentName__}Succeeded {",
			"\ttype: ActionTypes.Add${1:__ComponentName__}Succeeded;",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"}",
			"",
			"export interface IAdd${1:__ComponentName__}Failed {",
			"\ttype: ActionTypes.Add${1:__ComponentName__}Failed;",
			"\terror: Error;",
			"}",
			"",
			"export interface IUpdate${1:__ComponentName__}Start {",
			"\ttype: ActionTypes.Update${1:__ComponentName__}Start;",
			"}",
			"",
			"export interface IUpdate${1:__ComponentName__}Succeeded {",
			"\ttype: ActionTypes.Update${1:__ComponentName__}Succeeded;",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"}",
			"",
			"export interface IUpdate${1:__ComponentName__}Failed {",
			"\ttype: ActionTypes.Update${1:__ComponentName__}Failed;",
			"\terror: Error;",
			"}",
			"",
			"export interface IDelete${1:__ComponentName__}Start {",
			"\ttype: ActionTypes.Delete${1:__ComponentName__}Start;",
			"}",
			"",
			"export interface IDelete${1:__ComponentName__}Succeeded {",
			"\ttype: ActionTypes.Delete${1:__ComponentName__}Succeeded;",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model;",
			"}",
			"",
			"export interface IDelete${1:__ComponentName__}Failed {",
			"\ttype: ActionTypes.Delete${1:__ComponentName__}Failed;",
			"\terror: Error;",
			"}",
			"",
			"export type I${1:__ComponentName__}Action =",
			"\t| IGetAll${1:__ComponentName__}Start",
			"\t| IGetAll${1:__ComponentName__}Succeeded",
			"\t| IGetAll${1:__ComponentName__}Failed",
			"\t| IGet${1:__ComponentName__}ByIdStart",
			"\t| IGet${1:__ComponentName__}ByIdSucceeded",
			"\t| IGet${1:__ComponentName__}ByIdFailed",
			"\t| IAdd${1:__ComponentName__}Start",
			"\t| IAdd${1:__ComponentName__}Succeeded",
			"\t| IAdd${1:__ComponentName__}Failed",
			"\t| IUpdate${1:__ComponentName__}Start",
			"\t| IUpdate${1:__ComponentName__}Succeeded",
			"\t| IUpdate${1:__ComponentName__}Failed",
			"\t| IDelete${1:__ComponentName__}Start",
			"\t| IDelete${1:__ComponentName__}Succeeded",
			"\t| IDelete${1:__ComponentName__}Failed;",
			"",
			"export default I${1:__ComponentName__}Action;",
			""
		],
		"description": "Create new Action Interfaces."
	},
	"ReactJS : TS : Action : NewAction": {
		"prefix": "ccReactJS_TS_Action_NewAction",
		"body": [
			"import {",
			"\tIAdd${1:__ComponentName__}Failed,",
			"\tIAdd${1:__ComponentName__}Start,",
			"\tIAdd${1:__ComponentName__}Succeeded,",
			"\tI${1:__ComponentName__}Action,",
			"\tIDelete${1:__ComponentName__}Failed,",
			"\tIDelete${1:__ComponentName__}Start,",
			"\tIDelete${1:__ComponentName__}Succeeded,",
			"\tIGetAll${1:__ComponentName__}Failed,",
			"\tIGetAll${1:__ComponentName__}Start,",
			"\tIGetAll${1:__ComponentName__}Succeeded,",
			"\tIGet${1:__ComponentName__}ByIdFailed,",
			"\tIGet${1:__ComponentName__}ByIdStart,",
			"\tIGet${1:__ComponentName__}ByIdSucceeded,",
			"\tIUpdate${1:__ComponentName__}Failed,",
			"\tIUpdate${1:__ComponentName__}Start,",
			"\tIUpdate${1:__ComponentName__}Succeeded",
			"} from 'Actions/Interfaces/I${1:__ComponentName__}Action';",
			"import { Dispatch } from 'redux';",
			"import ${1:__ComponentName__}Service from 'Services/${1:__ComponentName__}Services';",
			"import * as ${1:__ComponentName__}ActionTypes from 'Types/ActionTypes/${1:__ComponentName__}ActionTypes';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"",
			"export function getAll${1:__ComponentName__}Start(): IGetAll${1:__ComponentName__}Start {",
			"\treturn {",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.GetAll${1:__ComponentName__}Start",
			"\t};",
			"}",
			"",
			"export function getAll${1:__ComponentName__}Succeeded(",
			"\t${1:__ComponentName__}Array: ${1:__ComponentName__}Model[]",
			"): IGetAll${1:__ComponentName__}Succeeded {",
			"\treturn {",
			"\t\t${1:__ComponentName__}Array,",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.GetAll${1:__ComponentName__}Succeeded",
			"\t};",
			"}",
			"",
			"export function getAll${1:__ComponentName__}Failed(error: Error): IGetAll${1:__ComponentName__}Failed {",
			"\treturn {",
			"\t\terror,",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.GetAll${1:__ComponentName__}Failed",
			"\t};",
			"}",
			"",
			"export function get${1:__ComponentName__}ByIdStart(): IGet${1:__ComponentName__}ByIdStart {",
			"\treturn {",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Get${1:__ComponentName__}ByIdStart",
			"\t};",
			"}",
			"",
			"export function get${1:__ComponentName__}ByIdSucceeded(",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model",
			"): IGet${1:__ComponentName__}ByIdSucceeded {",
			"\treturn {",
			"\t\t${1:__ComponentName__},",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Get${1:__ComponentName__}ByIdSucceeded",
			"\t};",
			"}",
			"",
			"export function get${1:__ComponentName__}ByIdFailed(error: Error): IGet${1:__ComponentName__}ByIdFailed {",
			"\treturn {",
			"\t\terror,",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Get${1:__ComponentName__}ByIdFailed",
			"\t};",
			"}",
			"",
			"export function add${1:__ComponentName__}Start(): IAdd${1:__ComponentName__}Start {",
			"\treturn { type: ${1:__ComponentName__}ActionTypes.Add${1:__ComponentName__}Start };",
			"}",
			"",
			"export function add${1:__ComponentName__}Succeeded(",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model",
			"): IAdd${1:__ComponentName__}Succeeded {",
			"\treturn {",
			"\t\t${1:__ComponentName__},",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Add${1:__ComponentName__}Succeeded",
			"\t};",
			"}",
			"",
			"export function add${1:__ComponentName__}Failed(error: Error): IAdd${1:__ComponentName__}Failed {",
			"\treturn {",
			"\t\terror,",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Add${1:__ComponentName__}Failed",
			"\t};",
			"}",
			"",
			"export function update${1:__ComponentName__}Start(): IUpdate${1:__ComponentName__}Start {",
			"\treturn { type: ${1:__ComponentName__}ActionTypes.Update${1:__ComponentName__}Start };",
			"}",
			"",
			"export function update${1:__ComponentName__}Succeeded(",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model",
			"): IUpdate${1:__ComponentName__}Succeeded {",
			"\treturn {",
			"\t\t${1:__ComponentName__},",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Update${1:__ComponentName__}Succeeded",
			"\t};",
			"}",
			"",
			"export function update${1:__ComponentName__}Failed(error: Error): IUpdate${1:__ComponentName__}Failed {",
			"\treturn {",
			"\t\terror,",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Update${1:__ComponentName__}Failed",
			"\t};",
			"}",
			"",
			"export function delete${1:__ComponentName__}Start(): IDelete${1:__ComponentName__}Start {",
			"\treturn { type: ${1:__ComponentName__}ActionTypes.Delete${1:__ComponentName__}Start };",
			"}",
			"",
			"export function delete${1:__ComponentName__}Succeeded(",
			"\t${1:__ComponentName__}: ${1:__ComponentName__}Model",
			"): IDelete${1:__ComponentName__}Succeeded {",
			"\treturn {",
			"\t\t${1:__ComponentName__},",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Delete${1:__ComponentName__}Succeeded",
			"\t};",
			"}",
			"",
			"export function delete${1:__ComponentName__}Failed(error: Error): IDelete${1:__ComponentName__}Failed {",
			"\treturn {",
			"\t\terror,",
			"\t\ttype: ${1:__ComponentName__}ActionTypes.Delete${1:__ComponentName__}Failed",
			"\t};",
			"}",
			"",
			"export function getAll${1:__ComponentName__}() {",
			"\treturn (dispatch: Dispatch<I${1:__ComponentName__}Action>) => {",
			"\t\tdispatch(getAll${1:__ComponentName__}Start());",
			"\t\treturn ${1:__ComponentName__}Service.getAll${1:__ComponentName__}()",
			"\t\t\t.then((res: ${1:__ComponentName__}Model[]) => {",
			"\t\t\t\tdispatch(getAll${1:__ComponentName__}Succeeded(res));",
			"\t\t\t})",
			"\t\t\t.catch((error: Error) => {",
			"\t\t\t\tdispatch(getAll${1:__ComponentName__}Failed(error));",
			"\t\t\t\tthrow error;",
			"\t\t\t});",
			"\t};",
			"}",
			"",
			"export function add${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {",
			"\treturn (dispatch: Dispatch<I${1:__ComponentName__}Action>) => {",
			"\t\tdispatch(add${1:__ComponentName__}Start());",
			"\t\treturn ${1:__ComponentName__}Service.add${1:__ComponentName__}(${1:__ComponentName__})",
			"\t\t\t.then((res: ${1:__ComponentName__}Model) => {",
			"\t\t\t\tdispatch(add${1:__ComponentName__}Succeeded(res));",
			"\t\t\t})",
			"\t\t\t.catch((error: Error) => {",
			"\t\t\t\tdispatch(add${1:__ComponentName__}Failed(error));",
			"\t\t\t\tthrow error;",
			"\t\t\t});",
			"\t};",
			"}",
			"",
			"export function update${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {",
			"\treturn (dispatch: Dispatch<I${1:__ComponentName__}Action>) => {",
			"\t\tdispatch(update${1:__ComponentName__}Start());",
			"\t\treturn ${1:__ComponentName__}Service.update${1:__ComponentName__}(${1:__ComponentName__})",
			"\t\t\t.then((res: ${1:__ComponentName__}Model) => {",
			"\t\t\t\tdispatch(update${1:__ComponentName__}Succeeded(res));",
			"\t\t\t})",
			"\t\t\t.catch((error: Error) => {",
			"\t\t\t\tdispatch(update${1:__ComponentName__}Failed(error));",
			"\t\t\t\tthrow error;",
			"\t\t\t});",
			"\t};",
			"}",
			"",
			"export function delete${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {",
			"\treturn (dispatch: Dispatch<I${1:__ComponentName__}Action>) => {",
			"\t\tdispatch(delete${1:__ComponentName__}Start());",
			"\t\treturn ${1:__ComponentName__}Service.delete${1:__ComponentName__}(${1:__ComponentName__})",
			"\t\t\t.then(() => {",
			"\t\t\t\tdispatch(delete${1:__ComponentName__}Succeeded(${1:__ComponentName__}));",
			"\t\t\t})",
			"\t\t\t.catch((error: Error) => {",
			"\t\t\t\tdispatch(delete${1:__ComponentName__}Failed(error));",
			"\t\t\t\tthrow error;",
			"\t\t\t});",
			"\t};",
			"}",
			""
		],
		"description": "Create a New Action."
	},
	"ReactJS : TS : Service : NewService": {
		"prefix": "ccReactJS_TS_Service_NewService",
		"body": [
			"import delay from './delay'; // For testing async call. Set to 0 on prod.",
			"import { BaseUrl } from 'Settings/Path';",
			"import axios, { AxiosResponse } from 'axios';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"",
			"const client = axios.create({",
			"\tbaseURL: BaseUrl,",
			"\theaders: {",
			"\t\t'Content-Type': 'application/json'",
			"\t}",
			"});",
			"",
			"class ${1:__ComponentName__}Service {",
			"\tstatic ServiceEndPoint = '${1:__ComponentName__}';",
			"",
			"\tstatic getAll${1:__ComponentName__}() {",
			"\t\treturn new Promise<${1:__ComponentName__}Model[]>((resolve, reject) => {",
			"\t\t\tsetTimeout(() => {",
			"\t\t\t\tclient",
			"\t\t\t\t\t.get(this.ServiceEndPoint)",
			"\t\t\t\t\t.then((res: AxiosResponse) => resolve(res.data));",
			"\t\t\t}, delay);",
			"\t\t});",
			"\t}",
			"",
			"\tstatic add${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {",
			"\t\t${1:__ComponentName__} = Object.assign({}, ${1:__ComponentName__}); // To avoid manipulating object passed in",
			"\t\tlet result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {",
			"\t\t\tsetTimeout(() => {",
			"\t\t\t\tclient",
			"\t\t\t\t\t.post(this.ServiceEndPoint, ${1:__ComponentName__})",
			"\t\t\t\t\t.then((res: AxiosResponse) => {",
			"\t\t\t\t\t\treturn resolve(res.data);",
			"\t\t\t\t\t});",
			"\t\t\t}, delay);",
			"\t\t});",
			"\t\treturn result;",
			"\t}",
			"",
			"\tstatic update${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {",
			"\t\tconst ${1:__ComponentName__}EndPoint = `${this.ServiceEndPoint}/${${1:__ComponentName__}.id}`;",
			"\t\t${1:__ComponentName__} = Object.assign({}, ${1:__ComponentName__}); // To avoid manipulating object passed in",
			"\t\tlet result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {",
			"\t\t\tsetTimeout(() => {",
			"\t\t\t\tclient.put(${1:__ComponentName__}EndPoint, ${1:__ComponentName__}).then((res: AxiosResponse) => {",
			"\t\t\t\t\treturn resolve(res.data);",
			"\t\t\t\t});",
			"\t\t\t}, delay);",
			"\t\t});",
			"\t\treturn result;",
			"\t}",
			"",
			"\tstatic delete${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {",
			"\t\tconst ${1:__ComponentName__}EndPoint = `${this.ServiceEndPoint}/${${1:__ComponentName__}.id}`;",
			"\t\tlet result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {",
			"\t\t\tsetTimeout(() => {",
			"\t\t\t\tclient.delete(${1:__ComponentName__}EndPoint).then((res: AxiosResponse) => {",
			"\t\t\t\t\treturn resolve(res.data);",
			"\t\t\t\t});",
			"\t\t\t}, delay);",
			"\t\t});",
			"\t\treturn result;",
			"\t}",
			"}",
			"",
			"export default ${1:__ComponentName__}Service;",
			""
		],
		"description": "Create New ReactJS Component Service."
	},
	"ReactJS : TS : Reducer : RootReducer": {
		"prefix": "ccReactJS_TS_Reducer_RootReducer",
		"body": [
			"import { combineReducers } from 'redux';",
			"import { ${1:__ComponentName__}Reducer } from './${1:__ComponentName__}Reducer';",
			"",
			"const rootReducer = combineReducers({",
			"\t${1:__ComponentName__}Module: ${1:__ComponentName__}Reducer",
			"});",
			"",
			"export default rootReducer;",
			""
		],
		"description": "Create a ReactJS Root Reducer."
	},
	"ReactJS : TS : Reducer : NewReducer": {
		"prefix": "ccReactJS_TS_Reducer_NewReducer",
		"body": [
			"import * as I${1:__ComponentName__}Actions from 'Actions/Interfaces/I${1:__ComponentName__}Action';",
			"import * as ${1:__ComponentName__}ActionTypes from 'Types/ActionTypes/${1:__ComponentName__}ActionTypes';",
			"import { ${1:__ComponentName__}Model } from 'Types/ModelTypes/${1:__ComponentName__}Model';",
			"import ${1:__ComponentName__}StateType from 'Types/StateTypes/${1:__ComponentName__}StateType';",
			"",
			"const initialState: ${1:__ComponentName__}StateType = {",
			"\t${1:__ComponentName__}: new ${1:__ComponentName__}Model(),",
			"\t${1:__ComponentName__}Array: [],",
			"\terror: undefined,",
			"\tisLoading: false,",
			"\tsearchTerm: ''",
			"};",
			"",
			"export function ${1:__ComponentName__}Reducer(",
			"\tstate: ${1:__ComponentName__}StateType = initialState,",
			"\t${1:__ComponentName__}Action: I${1:__ComponentName__}Actions.I${1:__ComponentName__}Action",
			"): ${1:__ComponentName__}StateType {",
			"\tswitch (${1:__ComponentName__}Action.type) {",
			"\t\tcase ${1:__ComponentName__}ActionTypes.GetAll${1:__ComponentName__}Start: {",
			"\t\t\treturn { ...state, isLoading: true };",
			"\t\t}",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.GetAll${1:__ComponentName__}Succeeded: {",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\t${1:__ComponentName__}Array: (${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IGetAll${1:__ComponentName__}Succeeded)",
			"\t\t\t\t\t.${1:__ComponentName__}Array,",
			"\t\t\t\tisLoading: false",
			"\t\t\t};",
			"\t\t}",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.GetAll${1:__ComponentName__}Failed: {",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\terror: (${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IGetAll${1:__ComponentName__}Failed)",
			"\t\t\t\t\t.error,",
			"\t\t\t\tisLoading: false",
			"\t\t\t};",
			"\t\t}",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.Get${1:__ComponentName__}ByIdStart: {",
			"\t\t\treturn { ...state, isLoading: true };",
			"\t\t}",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.Get${1:__ComponentName__}ByIdSucceeded: {",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\t${1:__ComponentName__}: (${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IGet${1:__ComponentName__}ByIdSucceeded)",
			"\t\t\t\t\t.${1:__ComponentName__},",
			"\t\t\t\tisLoading: false",
			"\t\t\t};",
			"\t\t}",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.Get${1:__ComponentName__}ByIdFailed: {",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\terror: (${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IGet${1:__ComponentName__}ByIdFailed)",
			"\t\t\t\t\t.error,",
			"\t\t\t\tisLoading: false",
			"\t\t\t};",
			"\t\t}",
			"\t\tcase ${1:__ComponentName__}ActionTypes.Add${1:__ComponentName__}Succeeded:",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\t${1:__ComponentName__}Array: state.${1:__ComponentName__}Array.concat(",
			"\t\t\t\t\t(${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IAdd${1:__ComponentName__}Succeeded)",
			"\t\t\t\t\t\t.${1:__ComponentName__}",
			"\t\t\t\t)",
			"\t\t\t};",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.Delete${1:__ComponentName__}Succeeded:",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\t${1:__ComponentName__}Array: state.${1:__ComponentName__}Array.filter(",
			"\t\t\t\t\t(s: ${1:__ComponentName__}Model) =>",
			"\t\t\t\t\t\ts.id !==",
			"\t\t\t\t\t\t(${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IDelete${1:__ComponentName__}Succeeded)",
			"\t\t\t\t\t\t\t.${1:__ComponentName__}.id",
			"\t\t\t\t)",
			"\t\t\t};",
			"",
			"\t\tcase ${1:__ComponentName__}ActionTypes.Update${1:__ComponentName__}Succeeded:",
			"\t\t\treturn {",
			"\t\t\t\t...state,",
			"\t\t\t\t${1:__ComponentName__}Array: state.${1:__ComponentName__}Array.filter(",
			"\t\t\t\t\t(s: ${1:__ComponentName__}Model) =>",
			"\t\t\t\t\t\ts.id !==",
			"\t\t\t\t\t\t(${1:__ComponentName__}Action as I${1:__ComponentName__}Actions.IUpdate${1:__ComponentName__}Succeeded)",
			"\t\t\t\t\t\t\t.${1:__ComponentName__}.id",
			"\t\t\t\t)",
			"\t\t\t};",
			"",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}",
			""
		],
		"description": "Create a New ReactJS Reducer."
	},
	"ReactJS : TS : Route : NewRoute": {
		"prefix": "ccReactJS_TS_Route_NewRoute",
		"body": [
			"<Route path=\"${1:__path__}\" component={${2:__componentName__} />"
		],
		"description": "Create a Route (TypeScript)"
	}
}
