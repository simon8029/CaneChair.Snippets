{
	"ReactJS : TS : Route : NewRoute": {
		"prefix": "ccReactJS_TS_Route_NewRoute",
		"body": [
			"<Route path=\"${1:__path__}\" component={${2:__componentName__} />"
		],
		"description": "Create a Route (TypeScript)"
	},
	"ReactJS : TS : Reducer : NewReducer": {
		"prefix": "ccReactJS_TS_Reducer_NewReducer",
		"body": [
			"import * as ${1:__ComponentName__}ActionTypes from 'types/actionTypes/${1:__ComponentName__}ActionTypes';",
			"import { I${1:__ComponentName__}Action } from 'actions/interfaces/I${1:__ComponentName__}Action';",
			"import { ${1:__ComponentName__}Model } from 'types/modelTypes/${1:__ComponentName__}Model';",
			"",
			"export function ${1:__ComponentName__}Reducer(state: ${1:__ComponentName__}Model[] = [], ${1:__ComponentName__}Action: I${1:__ComponentName__}Action): ${1:__ComponentName__}Model[] | ${1:__ComponentName__}Model {",
			"  switch (${1:__ComponentName__}Action.type) {",
			"    case ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}GetAllSuccess:",
			"      return ${1:__ComponentName__}Action.${1:__ComponentName__}Array;",
			"    case ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}AddSuccess:",
			"      return [...state, ${1:__ComponentName__}Action.${1:__ComponentName__}];",
			"    case ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}DeleteSuccess:",
			"      return state.filter(s => s.id !== ${1:__ComponentName__}Action.${1:__ComponentName__}.id);",
			"    case ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}UpdateSuccess:",
			"      return [...state.filter(s => s.id !== ${1:__ComponentName__}Action.${1:__ComponentName__}.id), Object.assign({}, ${1:__ComponentName__}Action.${1:__ComponentName__})];",
			"    default:",
			"      return state;",
			"  }",
			"}"
		],
		"description": "Create a ReactJS Reducer (TypeScript)"
	},
	"ReactJS : TS : Action : Interface": {
		"prefix": "ccReactJS_TS_Action_Interface",
		"body": [
			"import * as ActionTypes from 'types/actionTypes';\r",
			"import { ${1:__ComponentName__}Model } from 'types/modelTypes/${1:__ComponentName__}Model';\r",
			"\r",
			"export interface IGetAll${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}GetAllSuccess;\r",
			"  ${1:__ComponentName__}Array: ${1:__ComponentName__}Model[];\r",
			"}\r",
			"\r",
			"export interface IGet${1:__ComponentName__}ByIdSuccess {\r",
			"  type: ActionTypes.${1:__ComponentName__}GetByIdSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export interface IAddNew${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}AddSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export interface IUpdate${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}UpdateSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export interface IDelete${1:__ComponentName__}Success {\r",
			"  type: ActionTypes.${1:__ComponentName__}DeleteSuccess;\r",
			"  ${1:__ComponentName__}: ${1:__ComponentName__}Model;\r",
			"}\r",
			"\r",
			"export type I${1:__ComponentName__}Action =\r",
			"  IGetAll${1:__ComponentName__}Success |\r",
			"  IGet${1:__ComponentName__}ByIdSuccess |\r",
			"  IAddNew${1:__ComponentName__}Success |\r",
			"  IUpdate${1:__ComponentName__}Success |\r",
			"  IDelete${1:__ComponentName__}Success;\r",
			"\r",
			"export default I${1:__ComponentName__}Action;\r",
			""
		],
		"description": "Create an action interface (TypeScript)"
	},
	"ReactJS : TS : Action : NewAction": {
		"prefix": "ccReactJS_TS_Action_NewAction",
		"body": [
			"import * as ${1:__ComponentName__}ActionTypes from 'types/actionTypes/${1:__ComponentName__}ActionTypes';\r",
			"import { ${1:__ComponentName__}Model } from 'types/modelTypes/${1:__ComponentName__}Model';\r",
			"import { IGetAll${1:__ComponentName__}Success, IAddNew${1:__ComponentName__}Success, IUpdate${1:__ComponentName__}Success, I${1:__ComponentName__}Action, IDelete${1:__ComponentName__}Success } from 'actions/interfaces/I${1:__ComponentName__}Action';\r",
			"import { beginAjaxCall } from './CommonActions';\r",
			"import { Dispatch } from 'react-redux';\r",
			"import ${1:__ComponentName__}Service from 'services/${1:__ComponentName__}Service';\r",
			"import { ajaxCallError } from './index';\r",
			"\r",
			"export function getAll${1:__ComponentName__}Success(${1:__ComponentName__}Array: ${1:__ComponentName__}Model[]): IGetAll${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}GetAllSuccess,\r",
			"    ${1:__ComponentName__}Array: ${1:__ComponentName__}Array\r",
			"  };\r",
			"}\r",
			"\r",
			"export function addNew${1:__ComponentName__}Success(${1:__ComponentName__}: ${1:__ComponentName__}Model): IAddNew${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}AddSuccess,\r",
			"    ${1:__ComponentName__}: ${1:__ComponentName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"export function update${1:__ComponentName__}Success(${1:__ComponentName__}: ${1:__ComponentName__}Model): IUpdate${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}UpdateSuccess,\r",
			"    ${1:__ComponentName__}: ${1:__ComponentName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"export function delete${1:__ComponentName__}Success(${1:__ComponentName__}: ${1:__ComponentName__}Model): IDelete${1:__ComponentName__}Success {\r",
			"  return {\r",
			"    type: ${1:__ComponentName__}ActionTypes.${1:__ComponentName__}DeleteSuccess,\r",
			"    ${1:__ComponentName__}: ${1:__ComponentName__}\r",
			"  };\r",
			"}\r",
			"\r",
			"export function getAll${1:__ComponentName__}() {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.getAll${1:__ComponentName__}()\r",
			"      .then((res: ${1:__ComponentName__}Model[]) => {\r",
			"        dispatch(getAll${1:__ComponentName__}Success(res));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			"\r",
			"export function addNew${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.addNew${1:__ComponentName__}(${1:__ComponentName__})\r",
			"      .then((s: ${1:__ComponentName__}Model) => {\r",
			"        dispatch(addNew${1:__ComponentName__}Success(s));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			"\r",
			"export function update${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.update${1:__ComponentName__}(${1:__ComponentName__})\r",
			"      .then((res: ${1:__ComponentName__}Model) => {\r",
			"        dispatch(update${1:__ComponentName__}Success(res));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			"\r",
			"export function delete${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): any {\r",
			"  return function (dispatch: Dispatch<I${1:__ComponentName__}Action>) {\r",
			"    dispatch(beginAjaxCall());\r",
			"    return ${1:__ComponentName__}Service.delete${1:__ComponentName__}(${1:__ComponentName__})\r",
			"      .then(() => {\r",
			"        dispatch(delete${1:__ComponentName__}Success(${1:__ComponentName__}));\r",
			"      }).catch((error: Error) => {\r",
			"        dispatch(ajaxCallError(error));\r",
			"        throw (error);\r",
			"      });\r",
			"  };\r",
			"}\r",
			""
		],
		"description": "Create a new Action (TypeScript)"
	},
	"ReactJS : TS : Type : ActionType": {
		"prefix": "ccReactJS_TS_Type_ActionType",
		"body": [
			"export const ${1:__ComponentName__}GetAllSuccess = '${1:__ComponentName__}GetAllSuccess';\r",
			"export const ${1:__ComponentName__}GetByIdSuccess = '${1:__ComponentName__}GetByIdSuccess';\r",
			"export const ${1:__ComponentName__}AddSuccess = '${1:__ComponentName__}AddSuccess';\r",
			"export const ${1:__ComponentName__}UpdateSuccess = '${1:__ComponentName__}UpdateSuccess';\r",
			"export const ${1:__ComponentName__}DeleteSuccess = '${1:__ComponentName__}DeleteSuccess';\r",
			"\r",
			"export type ${1:__ComponentName__}GetAllSuccess = typeof ${1:__ComponentName__}GetAllSuccess;\r",
			"export type ${1:__ComponentName__}GetByIdSuccess = typeof ${1:__ComponentName__}GetByIdSuccess;\r",
			"export type ${1:__ComponentName__}AddSuccess = typeof ${1:__ComponentName__}AddSuccess;\r",
			"export type ${1:__ComponentName__}UpdateSuccess = typeof ${1:__ComponentName__}UpdateSuccess;\r",
			"export type ${1:__ComponentName__}DeleteSuccess = typeof ${1:__ComponentName__}DeleteSuccess;\r",
			""
		],
		"description": "Create default action types (TypeScript)"
	},
	"ReactJS : TS : Service : NewService": {
		"prefix": "ccReactJS_TS_Service_NewService",
		"body": [
			"import delay from './delay'; // For testing async call. Set to 0 on prod.\r",
			"import { BaseUrl } from '../app.settings';\r",
			"import axios, { AxiosResponse } from 'axios';\r",
			"import { ${1:__ComponentName__}Model } from '../types/modelTypes/${1:__ComponentName__}Model';\r",
			"\r",
			"let httpRequest = axios.create({\r",
			"  baseURL: BaseUrl,\r",
			"  timeout: 3000\r",
			"});\r",
			"\r",
			"class ${1:__ComponentName__}Service {\r",
			"  static ServiceEndPoint = '${1:__ComponentName__}';\r",
			"\r",
			"  static getAll${1:__ComponentName__}() {\r",
			"    return new Promise<${1:__ComponentName__}Model[]>(\r",
			"      (resolve, reject) => {\r",
			"        setTimeout(() => {\r",
			"          httpRequest.get(this.ServiceEndPoint).then((res: AxiosResponse) => resolve(res.data));\r",
			"        }, delay);\r",
			"      });\r",
			"  }\r",
			"\r",
			"  static addNew${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {\r",
			"    ${1:__ComponentName__} = Object.assign({}, ${1:__ComponentName__}); // To avoid manipulating object passed in\r",
			"    let result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {\r",
			"      setTimeout(() => {\r",
			"        httpRequest.post(this.ServiceEndPoint, ${1:__ComponentName__}).then((res: AxiosResponse) => {\r",
			"          return resolve(res.data);\r",
			"        });\r",
			"      }, delay);\r",
			"    });\r",
			"    return result;\r",
			"  }\r",
			"\r",
			"  static update${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {\r",
			"    const ${1:__ComponentName__}EndPoint = `${this.ServiceEndPoint}/${${1:__ComponentName__}.id}`;\r",
			"    ${1:__ComponentName__} = Object.assign({}, ${1:__ComponentName__}); // To avoid manipulating object passed in\r",
			"    let result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {\r",
			"      setTimeout(() => {\r",
			"        httpRequest.put(${1:__ComponentName__}EndPoint, ${1:__ComponentName__}).then((res: AxiosResponse) => {\r",
			"          return resolve(res.data);\r",
			"        });\r",
			"      }, delay);\r",
			"    });\r",
			"    return result;\r",
			"  }\r",
			"\r",
			"  static delete${1:__ComponentName__}(${1:__ComponentName__}: ${1:__ComponentName__}Model): Promise<${1:__ComponentName__}Model> {\r",
			"    const ${1:__ComponentName__}EndPoint = `${this.ServiceEndPoint}/${${1:__ComponentName__}.id}`;\r",
			"    let result: Promise<${1:__ComponentName__}Model> = new Promise((resolve, reject) => {\r",
			"      setTimeout(() => {\r",
			"        httpRequest.delete(${1:__ComponentName__}EndPoint).then((res: AxiosResponse) => {\r",
			"          return resolve(res.data);\r",
			"        });\r",
			"      }, delay);\r",
			"    });\r",
			"    return result;\r",
			"  }\r",
			"}\r",
			"\r",
			"export default ${1:__ComponentName__}Service;\r",
			""
		],
		"description": "Create a new ReactJS Service (TypeScript)"
	}
}